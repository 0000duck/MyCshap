<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ab2d.Controls.ZoomPanel</name>
    </assembly>
    <members>
        <member name="T:Ab2d.Animations.ZoomPanelQuinticAnimator">
            <summary>
            ZoomPanelQuinticAnimator is a ZoomPanel animator that animates ZoomPanel and add some in and out easing using quintic function.
            </summary>
            <remarks>
            <para>
            The ZoomPanelQuinticAnimator is using a quintic function to animate the ZoomPanel.
            </para>
            <para>
            The quintic function is defined as:<br/>
            f(x) = a * x5 + b * x4 + c * x3 + d * x2 + e * x<br/>
            note: x5 = x * x * x * x * x
            </para>
            <para>
            The description for quintic function can be found at: http://en.wikipedia.org/wiki/Quintic_function
            </para>
            <para>
            The default parameter values for the quintic function are:<br/>
            a = 6<br/>
            b = -15<br/>
            c = 10<br/>
            d = e = 0<br/>
            </para>
            <para>
            To use other parameter values use the <see cref="M:Ab2d.Animations.ZoomPanelQuinticAnimator.SetParameters(System.Double,System.Double,System.Double,System.Double,System.Double)">SetParameters</see> method.
            </para>
            <para>
            Some examples for the parameters can be found at http://www.timotheegroleau.com/Flash/experiments/easing_function_generator.htm 
            </para>
            </remarks>
        </member>
        <member name="F:Ab2d.Animations.ZoomPanelQuinticAnimator.a">
            <summary>
            Protected coefficients for the quintic function.
            </summary>
        </member>
        <member name="F:Ab2d.Animations.ZoomPanelQuinticAnimator.b">
            <summary>
            Protected coefficients for the quintic function.
            </summary>
        </member>
        <member name="F:Ab2d.Animations.ZoomPanelQuinticAnimator.c">
            <summary>
            Protected coefficients for the quintic function.
            </summary>
        </member>
        <member name="F:Ab2d.Animations.ZoomPanelQuinticAnimator.d">
            <summary>
            Protected coefficients for the quintic function.
            </summary>
        </member>
        <member name="F:Ab2d.Animations.ZoomPanelQuinticAnimator.e">
            <summary>
            Protected coefficients for the quintic function.
            </summary>
        </member>
        <member name="M:Ab2d.Animations.ZoomPanelQuinticAnimator.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Ab2d.Animations.ZoomPanelQuinticAnimator.CalculateValue(System.Double,System.Double,System.Double)">
            <summary>
            Gets a value that is calculated from startValue, endValue and progress using quintic function.
            </summary>
            <param name="startValue">start value</param>
            <param name="endValue">end value</param>
            <param name="progress">progress value from 0 to 1</param>
            <returns>calculated value</returns>
        </member>
        <member name="M:Ab2d.Animations.ZoomPanelQuinticAnimator.SetParameters(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the parameters for the quintic function.
            </summary>
            <remarks>
            <para>
            The parameters for the quintic function define the behavior of the animation.
            </para>
            <para>
            The quintic function is defined as:<br/>
            f(x) = a * x5 + b * x4 + c * x3 + d * x2 + e * x<br/>
            note: x5 = x * x * x * x * x
            </para>
            <para>
            The default values for the parameters are:<br/>
            a = 6<br/>
            b = -15<br/>
            c = 10<br/>
            d = e = 0<br/>
            </para>
            <para>
            Some examples for the parameters can be found at http://www.timotheegroleau.com/Flash/experiments/easing_function_generator.htm 
            </para>        
            </remarks>
            <param name="a">a</param>
            <param name="b">b</param>
            <param name="c">c</param>
            <param name="d">d</param>
            <param name="e">e</param>
        </member>
        <member name="T:Ab2d.Animations.BaseZoomPanelAnimator">
            <summary>
            BaseZoomPanelAnimator is a base class for all ZoomPanel animators.
            </summary>
            <remarks>
            <para>
            All ZoomPanel animators must implement the abstract CalculateValue method.
            It is also possible to override the CalculateViewboxAndRotationAngle method to provide additional customizations on how the Viewbox and RotationAngle are animated.
            For example it is possible to animate the Width and Height differently as X and Y.
            </para>
            </remarks>
        </member>
        <member name="M:Ab2d.Animations.BaseZoomPanelAnimator.CalculateViewboxAndRotationAngle(System.Windows.Rect,System.Windows.Rect,System.Double,System.Double,System.Double,System.Windows.Rect@,System.Double@)">
            <summary>
            Calculates the new Viewbox and RotationAngle values from the properties.
            </summary>
            <param name="startViewbox">animation start Viewbox value as Rect</param>
            <param name="endViewbox">animation end Viewbox value as Rect</param>
            <param name="startRotationAngle">animation start RotationAngle</param>
            <param name="endRotationAngle">animation end RotationAngle</param>
            <param name="progress">progress of animation from 0 to 1</param>
            <param name="newViewbox">new Viewbox value</param>
            <param name="newRotationAngle">new RotationAngle value</param>
        </member>
        <member name="M:Ab2d.Animations.BaseZoomPanelAnimator.CalculateValue(System.Double,System.Double,System.Double)">
            <summary>
            Gets a value that is calculated from startValue, endValue and progress.
            </summary>
            <param name="startValue">start value</param>
            <param name="endValue">end value</param>
            <param name="progress">progress value from 0 to 1</param>
            <returns>calculated value</returns>
        </member>
        <member name="T:Ab2d.Animations.ZoomPanelLinearAnimator">
            <summary>
            ZoomPanelLinearAnimator is a simple ZoomPanel animator that animates ZoomPanel using simple linear interpolation.
            </summary>
        </member>
        <member name="M:Ab2d.Animations.ZoomPanelLinearAnimator.CalculateValue(System.Double,System.Double,System.Double)">
            <summary>
            Gets a value that is calculated from startValue, endValue and progress.
            </summary>
            <param name="startValue">start value</param>
            <param name="endValue">end value</param>
            <param name="progress">progress value from 0 to 1</param>
            <returns>calculated value</returns>
        </member>
        <member name="T:Ab2d.Controls.BaseMiniMap">
            <summary>
            BaseMiniMap is a base class for ZoomPanelMiniMap and ViewboxExMiniMap.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.BaseMiniMap.DEFAULT_VIEWBOX">
            <summary>
            Default value for Viewbox
            </summary>
        </member>
        <member name="P:Ab2d.Controls.BaseMiniMap.RectangleStroke">
            <summary>
            Gets or sets a Stroke of the Rectangle used for rectangle that shows the shown area defined by the Viewbox property. Default value is Blue.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.BaseMiniMap.RectangleStrokeProperty">
            <summary>
            RectangleStrokeProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.BaseMiniMap.RectangleStrokeThickness">
            <summary>
            Gets or sets a Stroke Thickness of the Rectangle used for rectangle that shows the shown area defined by the Viewbox property. Default value is 1.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.BaseMiniMap.RectangleStrokeThicknessProperty">
            <summary>
            RectangleStrokeThicknessProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.BaseMiniMap.MaskBrush">
            <summary>
            Gets or sets a Brush that is used to mask the area that is not visible. Default value is #46AAAAFF (semi transparent blue).
            </summary>
        </member>
        <member name="F:Ab2d.Controls.BaseMiniMap.MaskBrushProperty">
            <summary>
            RectangleFillProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.BaseMiniMap.MapImageElement">
            <summary>
            Gets or sets a Visual that is shown as the content of MiniMap.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.BaseMiniMap.MapImageElementProperty">
            <summary>
            MapImageElementProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.BaseMiniMap.Viewbox">
            <summary>
            Gets or sets a Rect that defines an area that is shown by a rectangle shown in the MiniMap.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.BaseMiniMap.ViewboxProperty">
            <summary>
            ViewboxProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.BaseMiniMap.ViewboxRotationAngle">
            <summary>
            Gets or sets a rotation angle in degrees that specifies how the content of the MiniMap is rotated.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.BaseMiniMap.ViewboxRotationAngleProperty">
            <summary>
            ViewboxRotationAngleProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.BaseMiniMap.IsMovingViewboxEnabled">
            <summary>
            Gets or sets a nullable Boolean that specifies if moving the Viewbox by mouse is enabled.
            </summary>
            <remarks>
            <para>
            If moving Viewbox by mouse is enabled, that when user moves the mouse over the shown area in MiniMap the area can be moved around with dragging the mouse around. 
            This also changes the Viewbox property. In <see cref="T:Ab2d.Controls.ViewboxExMiniMap"/> and <see cref="T:Ab2d.Controls.ZoomPanelMiniMap"/> this also changes the area shown by the associated <see cref="T:Ab2d.Controls.ViewboxEx"/> or <see cref="T:Ab2d.Controls.ZoomPanel"/>.
            </para>
            <para>
            If IsMovingViewboxEnabled is set to <b>true</b> that moving Viewbox by mouse is enabled. This is the default value in BaseMiniMap.
            </para>
            <para>
            If IsMovingViewboxEnabled is set to <b>false</b> that moving Viewbox by mouse is disabled.
            </para>
            <para>
            Setting IsMovingViewboxEnabled to <b>null</b> is only used in <see cref="T:Ab2d.Controls.ZoomPanelMiniMap"/>.
            There null value means that moving Viewbox by mouse is enabled or disabled based on the associated <see cref="T:Ab2d.Controls.ZoomPanel"/> control.
            If ZoomPanel is enabled and its ZoomMode is not set to None, than moving Viewbox is enabled. In ZoomPanelMiniMap this is the default value of IsMovingViewboxEnabled.
            </para>
            </remarks>
        </member>
        <member name="F:Ab2d.Controls.BaseMiniMap.IsMovingViewboxEnabledProperty">
            <summary>
            MapImageSourceProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.BaseMiniMap.CurrentIsMovingViewboxEnabled">
            <summary>
            Gets a current value of the IsMovingViewboxEnabled. This property can be overriden.
            </summary>
        </member>
        <member name="T:Ab2d.Controls.BaseMiniMap.ViewboxChangedRoutedEventHandler">
            <summary>
            ViewboxChangedRoutedEventHandler
            </summary>
            <param name="sender">sender</param>
            <param name="e">ViewboxChangedRoutedEventArgs</param>
        </member>
        <member name="E:Ab2d.Controls.BaseMiniMap.PreviewViewboxChanged">
            <summary>
            PreviewViewboxChanged occurs before the Viewbox value is changed (user moved the rectangle in MiniMap).
            The event can be used to prevent the change of viewbox (set Handled property to true), or change the new viewbox value before the change is applied.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.BaseMiniMap.PreviewViewboxChangedEvent">
            <summary>
            PreviewViewboxChangedEvent RoutedEvent
            </summary>
        </member>
        <member name="E:Ab2d.Controls.BaseMiniMap.ViewboxChanged">
            <summary>
            ViewboxChanged occurs after the Viewbox value is changed (user moved the rectangle in MiniMap).
            </summary>
        </member>
        <member name="F:Ab2d.Controls.BaseMiniMap.ViewboxChangedEvent">
            <summary>
            ViewboxChangedEvent RoutedEvent
            </summary>
        </member>
        <member name="F:Ab2d.Controls.BaseMiniMap.mapCanvas">
            <summary>
            Root canvas that hosts all the rectangles (defined in Generix.xaml).
            </summary>
        </member>
        <member name="F:Ab2d.Controls.BaseMiniMap.mapImageRectangle">
            <summary>
            Rectangle that shows the content of MiniMap. The content is shown as VisualBrush and set to Rectangle's Fill (defined in Generix.xaml). 
            </summary>
        </member>
        <member name="F:Ab2d.Controls.BaseMiniMap.mapImageVisualBrush">
            <summary>
            VisualBrush that is used to show the content of MiniMap (defined in Generix.xaml).
            </summary>
        </member>
        <member name="F:Ab2d.Controls.BaseMiniMap.strokeRectangle">
            <summary>
            Rectangle that is used to show the selection rectangle.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.BaseMiniMap.viewboxOuterRectangleGeometry">
            <summary>
            Outer RectangleGeometry that shows the mask around the selection rectangle.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.BaseMiniMap.viewboxClipRectangleGeometry">
            <summary>
            RectangleGeometry that is used to clip the mask rectangle defined by viewboxOuterRectangleGeometry.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.BaseMiniMap.panCursor">
            <summary>
            panCursor
            </summary>
        </member>
        <member name="F:Ab2d.Controls.BaseMiniMap.panCursorDown">
            <summary>
            panCursorDown
            </summary>
        </member>
        <member name="M:Ab2d.Controls.BaseMiniMap.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab2d.Controls.BaseMiniMap.OnApplyTemplate">
            <summary>
            OnApplyTemplate
            </summary>
        </member>
        <member name="M:Ab2d.Controls.BaseMiniMap.InitializeCursors">
            <summary>
            InitializeCursors method defines cursors that are used to move the shown area of the mini map. The method can be overridden to specify custom cursors.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.BaseMiniMap.Refresh">
            <summary>
            Manually refreshes the shown image and rectangle
            </summary>
        </member>
        <member name="M:Ab2d.Controls.BaseMiniMap.UpdateImageElement">
            <summary>
            UpdateImageElement is called after MapImageElement is changed.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.BaseMiniMap.UpdateImageElement(System.Windows.Media.Visual)">
            <summary>
            UpdateImageElement is called after MapImageElement is changed.
            </summary>
            <param name="newVisual">newVisual</param>
        </member>
        <member name="M:Ab2d.Controls.BaseMiniMap.UpdateRectangle">
            <summary>
            UpdateRectangle method updates the rectangles that show the shown area.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.BaseMiniMap.GetViewboxForClipRectangle">
            <summary>
            Returns the used Viewbox. Used in UpdateRectangle method. The method is virtual so the Actual Viewbox or other viewbox can be used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ab2d.Controls.BaseMiniMap.UpdateRectangleMouseEvents">
            <summary>
            UpdateRectangleMouseEvents method updates the mouse events on the mini map rectangle.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.Common.ZoomPanelFinder.FindZoomPanel(System.Object)">
            <summary>
            FindZoomPanel in element (going through its Content and Children)
            </summary>
            <param name="element">start element</param>
            <returns>ZoomPanel if found else null</returns>
        </member>
        <member name="M:Ab2d.Controls.Common.ZoomPanelFinder.GetRootControl(System.Windows.FrameworkElement)">
            <summary>
            Gets Window or Page
            </summary>
            <param name="element">the start object</param>
            <returns>Window or Page</returns>
        </member>
        <member name="M:Ab2d.Controls.Common.ZoomPanelFinder.GetDesignTimeWindowChild(System.Windows.FrameworkElement)">
            <summary>
            For Design time only: Iterates through parent controls until DesignTimeWindow is found - than returns its child
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Ab2d.Controls.Common.ZoomPanelFinder.GetUserControlOrWindowOrPage(System.Windows.FrameworkElement)">
            <summary>
            Gets UserControl, Window or Page
            </summary>
            <param name="element">the start object</param>
            <returns>UserControl, Window or Page</returns>
        </member>
        <member name="T:Ab2d.Controls.ActualViewboxChangedEventArgs">
            <summary>
            Event args used to notify that the current ActualViewbox value on ViewboxEx has changed.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ActualViewboxChangedEventArgs.OldActualViewboxValue">
            <summary>
            Old Viewbox Value
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ActualViewboxChangedEventArgs.NewActualViewboxValue">
            <summary>
            New Viewbox Value. If the value is changed, the changed value will be applied as the new Viewbox value
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ActualViewboxChangedEventArgs.#ctor(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Constructor
            </summary>
            <param name="oldActualViewboxValue">oldActualViewboxValue</param>
            <param name="newActualViewboxValue">newActualViewboxValue</param>
        </member>
        <member name="T:Ab2d.Controls.NavigationCircle">
            <summary>
            NavigationCircle controls shows left, right, up, down and center buttons that can be used for navigation.
            </summary>
            <remarks>
            <para>
            <b>NavigationCircle</b> controls shows left, right, up, down and center buttons that can be used for navigation.
            </para>
            <para>
            The control is used in <see cref="T:Ab2d.Controls.ZoomPanelNavigator"/> to control the <see cref="T:Ab2d.Controls.ZoomPanel"/>.
            </para>
            <para>
            The control can be also used without ZoomPanel. In this case the user needs to bind to the following commands (without binding the buttons will be disabled):<br/>
            Ab2d.Controls.ZoomPanel.MoveLeftCommand<br/>
            Ab2d.Controls.ZoomPanel.MoveRightCommand<br/>
            Ab2d.Controls.ZoomPanel.MoveUpCommand<br/>
            Ab2d.Controls.ZoomPanel.MoveDownCommand<br/>
            Ab2d.Controls.ZoomPanel.ResetCommand<br/>
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.Controls.NavigationCircle.CenterButton">
            <summary>
            CenterButton
            </summary>
        </member>
        <member name="P:Ab2d.Controls.NavigationCircle.RightButton">
            <summary>
            RightButton
            </summary>
        </member>
        <member name="P:Ab2d.Controls.NavigationCircle.LeftButton">
            <summary>
            LeftButton
            </summary>
        </member>
        <member name="P:Ab2d.Controls.NavigationCircle.UpButton">
            <summary>
            UpButton
            </summary>
        </member>
        <member name="P:Ab2d.Controls.NavigationCircle.DownButton">
            <summary>
            DownButton
            </summary>
        </member>
        <member name="M:Ab2d.Controls.NavigationCircle.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Ab2d.Controls.NavigationCircle.OnApplyTemplate">
            <summary>
            OnApplyTemplate
            </summary>
        </member>
        <member name="T:Ab2d.Controls.NavigationSlider">
            <summary>
            NavigationSlider is a control that is derived from standard Slider control and has customized look for using it in zooming in and out scenarios.
            </summary>
            <remarks>
            <para>
            <b>NavigationSlider</b> is a control that is derived from standard Slider control and has customized look for using it in zooming in and out scenarios.
            </para>
            <para>
            The control is used in <see cref="T:Ab2d.Controls.ZoomPanelNavigator"/> to control the <see cref="T:Ab2d.Controls.ZoomPanel"/>.
            </para>
            <para>
            Because the control is derived from standard Slider control it has all its properties of the Slider control and can be used instead of the standard slider.
            </para>
            </remarks>
        </member>
        <member name="M:Ab2d.Controls.NavigationSlider.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Ab2d.Controls.NavigationSlider.OnApplyTemplate">
            <summary>
            OnApplyTemplate
            </summary>
        </member>
        <member name="T:Ab2d.Controls.NavigatorSliderValueChangedRoutedEventArgs">
            <summary>
            Routed event args used to notify that the zoom slider value in ZoomPanelNavigator has changed.
            The NewZoomFactor value can be changed in the event handler.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.NavigatorSliderValueChangedRoutedEventArgs.OldSliderValue">
            <summary>
            Old slider value
            </summary>
        </member>
        <member name="P:Ab2d.Controls.NavigatorSliderValueChangedRoutedEventArgs.NewSliderValue">
            <summary>
            New slider value
            </summary>
        </member>
        <member name="P:Ab2d.Controls.NavigatorSliderValueChangedRoutedEventArgs.OldZoomFactor">
            <summary>
            Old ZoomFactor value.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.NavigatorSliderValueChangedRoutedEventArgs.NewZoomFactor">
            <summary>
            New ZoomFactor calculated from new slider value. The value can be changed in the event handler.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.NavigatorSliderValueChangedRoutedEventArgs.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="oldSliderValue">old slider value</param>
            <param name="newSliderValue">new slider value</param>
            <param name="oldZoomFactor">old ZoomFactor</param>
            <param name="newZoomFactor">new ZoomFactor</param>
        </member>
        <member name="M:Ab2d.Controls.NavigatorSliderValueChangedRoutedEventArgs.#ctor(System.Object,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="source">source</param>
            <param name="oldSliderValue">old slider value</param>
            <param name="newSliderValue">new slider value</param>
            <param name="oldZoomFactor">old ZoomFactor</param>
            <param name="newZoomFactor">new ZoomFactor</param>
        </member>
        <member name="T:Ab2d.Controls.ZoomPanel">
            <summary>
            ZoomPanel control enables zooming and panning the content of the control with a mouse, with touch and multi-touch gestures.
            </summary>
            <remarks>
            <para>
            <b>ZoomPanel</b> control can be used to simply add a powerful and animated zooming and panning to any WPF application. 
            The control can be used to zoom and pan bitmap images, vector graphics, UI Elements, etc.
            </para>
            <para>
            Content can be zoomed and panned with mouse, with touch and multi-touch gestures.
            Touch support can be enabled or disabled with <see cref="P:Ab2d.Controls.ZoomPanel.IsTouchEnabled"/>, <see cref="P:Ab2d.Controls.ZoomPanel.IsTouchMoveEnabled"/>, <see cref="P:Ab2d.Controls.ZoomPanel.IsTouchScaleEnabled"/> and <see cref="P:Ab2d.Controls.ZoomPanel.IsTouchRotateEnabled"/> properties.
            By default all properties are set to true.
            </para>
            <para>
            NOTE that touch controls are working only in .Net 4 build of ZoomPanel (or newer) and does not work in .Net 3.5 build of the library.
            </para>
            <para>
            The following image shows the ZoomPanel with ZoomController in the upper left corner, ZoomPanelNavigator in the upper left corner and ZoomPanelMiniMap in the bottom right corner:<br/>
            <img src="ZoomPanelTiger.jpg"/>
            </para>    
            <para>
            ZoomPanel is usually used with a <see cref="T:Ab2d.Controls.ZoomController"/> that sets the mode in which ZoomPanel works.
            The following ZoomPanel modes are supported: <b>None</b>, <b>Move</b>, <b>Rectangle</b>, <b>ZoomIn</b>, <b>ZoomOut</b> (see <see cref="T:Ab2d.Controls.ZoomPanel.ZoomModeType"/> for more info).
            The current zoom mode can be get or set with <see cref="P:Ab2d.Controls.ZoomPanel.ZoomMode"/> property.
            </para>
            <para>
            With using <see cref="T:Ab2d.Controls.ZoomPanelNavigator"/> it is possible to set the zoom factor with a slider and move around the visible area with buttons.
            </para>
            <para>
            The <see cref="T:Ab2d.Controls.ZoomPanelMiniMap"/> shows which part of the content is shown. 
            It can be used to preview which part of the content is shown. 
            It also enables moving the shown content and zooming in and out with mouse wheel (shown in the bottom right corner of the image above).
            </para>
            <para>
            By default the content of the ZoomPanel can be freely zoomed in and out and panned to any direction. But it is possible to limit this by <see cref="P:Ab2d.Controls.ZoomPanel.ViewboxLimits"/>, <see cref="P:Ab2d.Controls.ZoomPanel.ViewboxMinSize"/> and <see cref="P:Ab2d.Controls.ZoomPanel.IsViewboxLimited"/>.
            The <see cref="P:Ab2d.Controls.ZoomPanel.ViewboxLimits"/> sets the maximum Viewbox size used by ZoomPanel - maximum zoom out level. The <see cref="P:Ab2d.Controls.ZoomPanel.ViewboxMinSize"/> sets the minimum Viewbox size used by ZoomPanel - maximum zoom in level.
            </para>
            <para>
            To add <b>scrollbars</b> to the ZoomPanel simply add it inside ScrollViewer control and set the CanContentScroll property on ScrollViewer to True (see the sample below).
            The ZoomPanel implements the IScrollInfo interface. 
            Therefore it can be fully controlled by the scrollbars.
            The size and position of the scrollbars is determined by the currently shown area.
            </para>
            <para>
            By default the zooming in and out is animated using quintic function to ease the animation.
            The default animation is implemented in <see cref="T:Ab2d.Animations.ZoomPanelQuinticAnimator"/> class.
            It is possible to provide custom animations with deriving a class from <see cref="T:Ab2d.Animations.BaseZoomPanelAnimator"/> and setting its instance to the <see cref="F:Ab2d.Controls.ZoomPanel.ZoomPanelAnimator"/> property.
            </para>
            <para>
            ZoomPanel also has a lot of methods that can be used to modify the ZoomPanel from code-behind. See samples for more info.
            </para>
            <para>
            With calling <see cref="M:Ab2d.Controls.ZoomPanel.RegisterCustomContentProvider(Ab2d.Controls.ZoomPanel.CustomContentProviderDelegate,System.Windows.Size)">RegisterCustomContentProvider</see> it is also possible to zoom dynamic and custom content - the content that is based on the current zoom level - for example a map.
            </para>    
            </remarks>
            <example>
            <para>
            The following sample shows how to use the ZoomPanel and ZoomController:
            <code lang="xml">
            &lt;Window x:Class="Ab2d.ZoomControlSample.ZoomPanelSample"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:ab2d="clr-namespace:Ab2d.Controls;assembly=Ab2d.Controls.ZoomPanel"&gt;
              &lt;Grid&gt;
                  &lt;ScrollViewer CanContentScroll="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto"&gt;
                      &lt;ab2d:ZoomPanel Name="myZoomPanel" Viewbox="0.2 0.2 0.6 0.6" IsAnimated="True" AnimationDuration="0:0:0.5"
                                      ViewboxLimits="-0.1 -0.1 1.2 1.2" ViewboxMinSize="0.1 0.1" IsViewboxLimited="True"&gt;
                          &lt;TextBlock&gt;12345&lt;/TextBlock&gt;
                      &lt;/ab2d:ZoomPanel&gt;
                  &lt;/ScrollViewer&gt;  
                  &lt;ab2d:ZoomController VerticalAlignment="Top" 
                                       HorizontalAlignment="Right"/&gt;
                  &lt;ab2d:ZoomPanelNavigator VerticalAlignment="Top" 
                                           HorizontalAlignment="Left"/&gt;
                  &lt;ab2d:ZoomPanelMiniMap VerticalAlignment="Bottom" 
                                         HorizontalAlignment="Right"/&gt;
                &lt;/Grid&gt;
            &lt;/Window&gt;   
            </code>
            Note that a namespace definition (ab2d) need to be added to the Window. Also note that the ZoomController automatically discovers the ZoomPanel. If ZoomPanel is not found or more than one ZoomPanel exist in the Window, than use the TargetZoomPanel or TargetZoomPanelName property on ZoomController.
            </para>
            <para>
            The following code is used to zoom the content of myZoomPanel for factor 1.5 (for 50%):
            <code>
            myZoomPanel.ZoomForFactor(1.5);
            </code>
            </para>
            </example>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.IsHistoryEnabled">
            <summary>
            Gets or sets a boolean that specifies if ZoomPanel is saving history of the previous Viewbox and RotationAngle values. Default value is false.
            </summary>
            <remarks>
            <para>
            IsHistoryEnabled gets or sets a boolean that specifies if ZoomPanel is saving history of the previous Viewbox and RotationAngle values.
            </para>
            <para>
            NOTE: By default the IsHistoryEnabled value is false.
            </para>
            <para>
            When the history is enabled the history items can be get with <see cref="P:Ab2d.Controls.ZoomPanel.HistoryItems"/> property. It also contains methods to go back and forward in the history.
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.HistoryItems">
            <summary>
            Provides access to the collection of history items and methods to navigate the history.
            </summary>
            <remarks>
            <para>
            HistoryItems is of type <see cref="T:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection"/> and provides access to the collection of history items and methods to navigate the history.
            </para>
            <para>
            NOTE: To enable saving history the <see cref="P:Ab2d.Controls.ZoomPanel.IsHistoryEnabled"/> property value must be set to true (by default it is set to false).
            </para>
            </remarks>
        </member>
        <member name="T:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItem">
            <summary>
            ZoomPanelHistoryItem class contains Viewbox and RotationAngle that define one state of the ZoomPanel.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItem.Viewbox">
            <summary>
            Viewbox as Rect that defines the area that is shown by the ZoomPanel.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItem.RotationAngle">
            <summary>
            Rotation angle used by the ZoomPanel.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItem.#ctor(System.Windows.Rect)">
            <summary>
            Constructor with viewbox - rotation angle is 0.
            </summary>
            <param name="viewbox">viewbox that defines the area that is shown by the ZoomPanel</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItem.#ctor(System.Windows.Rect,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="viewbox">viewbox that defines the area that is shown by the ZoomPanel</param>
            <param name="rotationAngle">rotation angle used by the ZoomPanel</param>
        </member>
        <member name="T:Ab2d.Controls.ZoomPanel.HistoryItemsChangedEventArgs">
            <summary>
            Provides data for the CurrentHistoryItemChanged event on ZoomPanelHistoryItemsCollection.
            </summary>
        </member>
        <member name="T:Ab2d.Controls.ZoomPanel.HistoryItemsChangedEventArgs.HistoryItemsChangeType">
            <summary>
            Enum that defines possible reasons that changed the current history item.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.HistoryItemsChangedEventArgs.HistoryItemsChangeType.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.HistoryItemsChangedEventArgs.HistoryItemsChangeType.MoveNext">
            <summary>
            MoveNext
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.HistoryItemsChangedEventArgs.HistoryItemsChangeType.MoveBack">
            <summary>
            MoveBack
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.HistoryItemsChangedEventArgs.HistoryItemsChangeType.AddItem">
            <summary>
            AddItem
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.HistoryItemsChangedEventArgs.NewHistoryItem">
            <summary>
            Gets the new history item as ZoomPanelHistoryItem.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.HistoryItemsChangedEventArgs.ChangeType">
            <summary>
            Gets the reason for the history item change.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.HistoryItemsChangedEventArgs.#ctor(Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItem,Ab2d.Controls.ZoomPanel.HistoryItemsChangedEventArgs.HistoryItemsChangeType)">
            <summary>
            Constructor
            </summary>
            <param name="newHistoryItem">new HistoryItem</param>
            <param name="changeType">change type</param>
        </member>
        <member name="T:Ab2d.Controls.ZoomPanel.HistoryItemsChangedEventHandler">
            <summary>
            Delegate for the CurrentHistoryItemChanged event on ZoomPanelHistoryItemsCollection.
            </summary>
            <param name="sender">sender</param>
            <param name="e">event args</param>
        </member>
        <member name="T:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection">
            <summary>
            ZoomPanelHistoryItemsCollection class contains data about history items and methods to navigate the history.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.IsSuspended">
            <summary>
            Gets a boolean that specifies if adding new items is currently suspended.
            </summary>
            <remarks>
            <para>
            To suspend adding new items call the <see cref="M:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.Suspend"/> method.
            </para>
            <para>
            To resume suspended state call the <see cref="M:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.Resume"/> method.
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.CurrentIndex">
            <summary>
            Gets the index of the current item.
            </summary>
            <remarks>
            <para>
            The index of the current history item in all the saved history items.
            </para>
            <para>
            When the index is 0, we are at the top of the history and cannot go to next item.
            When the index is more than 0, we can go back and to the next item.
            The maximum index value is <see cref="P:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.MaxItems"/> - 1.
            </para>
            <para>
            When <see cref="M:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.MoveNext"/> method is called the index is decreased by 1.
            When <see cref="M:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.MoveBack"/> method is called the index is increased by 1.
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.CurrentItem">
            <summary>
            Gets the current history item that contains the Viewbox and RotationAngle.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.MaxItems">
            <summary>
            Gets or sets the maximum number of saved history items. Special values: 0 = history is disabled, -1 = unlimited
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.ItemsCount">
            <summary>
            Gets the number of saved items currently in the history.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.IsBackAvailable">
            <summary>
            Gets a boolean that specifies if we can move to the previous (older) history item.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.IsNextAvailable">
            <summary>
            Gets a boolean that specifies if we can move the next (newer) history item.
            </summary>
        </member>
        <member name="E:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.CurrentHistoryItemChanged">
            <summary>
            Event that is fired when the current history item is changed.
            </summary>
        </member>
        <member name="T:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.GetCurrentItemCallbackDelegate">
            <summary>
            GetCurrentItemCallbackDelegate is used to get the ZoomPanelHistoryItem with the current Viewbox and RotationAngle.
            </summary>
            <returns>ZoomPanelHistoryItem with the current Viewbox and RotationAngle</returns>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.GetCurrentItemCallback">
            <summary>
            GetCurrentItemCallback is used to get the ZoomPanelHistoryItem with the current Viewbox and RotationAngle.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.Clear">
            <summary>
            Clears all the saved history items.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.AddItem(Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItem)">
            <summary>
            Adds a new ZoomPanelHistoryItem to the history items collection.
            </summary>
            <param name="historyItem">historyItem as ZoomPanelHistoryItem</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.MoveBack">
            <summary>
            Goes to the previous (older) history item.
            </summary>
            <remarks>
            <para>
            <b>MoveBack</b> goes to the previous (older) history item.
            </para>
            <para>
            It is possible to check if MoveBack method is available with the <see cref="P:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.IsBackAvailable"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.MoveNext">
            <summary>
            Goes to the next (newer) history item.
            </summary>
            <remarks>
            <para>
            <b>MoveBack</b> goes to the previous (newer) history item.
            </para>
            <para>
            This method can be called only after calling <see cref="M:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.MoveBack"/> method. It is possible to check if MoveNext method is available with the <see cref="P:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.IsNextAvailable"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.GetItem(System.Int32)">
            <summary>
            Returns a ZoomPanelHistoryItem with the specified itemIndex (0: the latest (newest) item, (ItemsCount - 1): the last (oldest) item)
            </summary>
            <param name="itemIndex">index of the history item</param>
            <returns>ZoomPanelHistoryItem</returns>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.Suspend">
            <summary>
            Suspends saving and navigating history items. Call Resume method to resume saving and navigating history items. 
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.Resume">
            <summary>
            Resumes saving and navigating history items. Call Suspend method to resume saving and navigating history items. 
            </summary>
        </member>
        <member name="E:Ab2d.Controls.ZoomPanel.ZoomPanelHistoryItemsCollection.PropertyChanged">
            <summary>
            PropertyChanged
            </summary>
        </member>
        <member name="T:Ab2d.Controls.ZoomPanel.ZoomModeType">
            <summary>
            Zoom modes
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.ZoomModeType.None">
            <summary>
            No zoom
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.ZoomModeType.Move">
            <summary>
            The content can be moved with the mouse
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.ZoomModeType.Rectangle">
            <summary>
            The part of the content that is show can be selected with the rectangle
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.ZoomModeType.ZoomIn">
            <summary>
            Mouse click zooms in the content
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.ZoomModeType.ZoomOut">
            <summary>
            Mouse click zooms out the content
            </summary>
        </member>
        <member name="T:Ab2d.Controls.ZoomPanel.CenterPositionUnitsType">
            <summary>
            Enum that defines the possible values for the CenterPositionUnits
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.CenterPositionUnitsType.Relative">
            <summary>
            CenterPosition is in relative units - for example (0.5 0.5) means middle of the content.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.CenterPositionUnitsType.Absolute">
            <summary>
            CenterPosition is in absolute units - for example for content size 200 x 100 the CenterPosition value (100 50) means middle of the content.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.IsAnimatedProperty">
            <summary>
            IsAnimatedProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.IsPanningAnimatedProperty">
            <summary>
            IsPanningAnimatedProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.AnimationDurationProperty">
            <summary>
            AnimationDurationProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.MouseWheelZoomFactorProperty">
            <summary>
            MouseWheelZoomFactorProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.ZoomInOutFactorProperty">
            <summary>
            ZoomInOutFactorProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.IsMouseWheelZoomEnabledProperty">
            <summary>
            IsMouseWheelZoomEnabledProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.IsToggleZoomModeEnabledProperty">
            <summary>
            IsToggleZoomModeEnabledProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.IsZoomPositionPreservedProperty">
            <summary>
            IsZoomPositionPreserved
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.RectangleStrokeProperty">
            <summary>
            RectangleStrokeProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.RectangleFillProperty">
            <summary>
            RectangleFillProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.ViewboxLimitsProperty">
            <summary>
            ViewboxLimitsProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.ViewboxMinSizeProperty">
            <summary>
            ViewboxMinSizeProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.IsViewboxLimitedProperty">
            <summary>
            IsViewboxLimitedProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.RotationAngleProperty">
            <summary>
            RotationAngleProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.ZoomFactorProperty">
            <summary>
            ZoomFactorProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.StretchProperty">
            <summary>
            StretchProperty
            </summary>
        </member>
        <member name="T:Ab2d.Controls.ZoomPanel.ZoomModeChangedRoutedEventHandler">
            <summary>
            ZoomModeChangedRoutedEventHandler
            </summary>
            <param name="sender">sender</param>
            <param name="e">ZoomModeChangedRoutedEventArgs</param>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.ZoomModeChangedEvent">
            <summary>
            ZoomModeChangedEvent RoutedEvent
            </summary>
        </member>
        <member name="T:Ab2d.Controls.ZoomPanel.ViewboxChangedRoutedEventHandler">
            <summary>
            ViewboxChangedRoutedEventHandler
            </summary>
            <param name="sender">sender</param>
            <param name="e">ViewboxChangedRoutedEventArgs</param>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.ZoomPanelAnimator">
            <summary>
            Gets or sets a class that is used to animate the ZoomPanel. Default value is ZoomPanelQuinticAnimator that adds some easing to animation.
            </summary>
            <remarks>
            <para>
            By default the <b>ZoomPanelAnimator</b> is set to <see cref="T:Ab2d.Animations.ZoomPanelQuinticAnimator"/>. 
            This animator provides some animation easing.
            </para>
            <para>
            To use simple linear animation use the <see cref="T:Ab2d.Animations.ZoomPanelLinearAnimator"/> class.
            </para>
            <para>
            It is possible to provide custom animations with deriving a class from <see cref="T:Ab2d.Animations.BaseZoomPanelAnimator"/> and setting its instance to the <b>ZoomPanelAnimator</b> property.
            </para>
            <para>
            The classes that derive from <see cref="T:Ab2d.Animations.BaseZoomPanelAnimator"/> must override abstract <see cref="M:Ab2d.Animations.BaseZoomPanelAnimator.CalculateValue(System.Double,System.Double,System.Double)">CalculateValue</see> method.
            Additional animation customizations are possible with overriding the CalculateViewboxAndRotationAngle method. 
            </para>
            </remarks>
            <example>
            <para>
            The following class defines a simple sine animation:
            </para>
            <code>
            public class ZoomPanelSineAnimator : BaseZoomPanelAnimator
            {
                public override double CalculateValue(double startValue, double endValue, double progress)
                {
                    double middleValue = (endValue - startValue) / 2;
            
                    if (progress &lt; 0.5)
                        return (1 - Math.Cos(progress * Math.PI)) * middleValue + startValue;
                    else
                        return Math.Sin((progress - 0.5) * Math.PI) * middleValue + startValue + middleValue;
                }
            }  
            </code>
            </example>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.PreviewViewboxChangedEvent">
            <summary>
            PreviewViewboxChangedEvent RoutedEvent
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.ViewboxChangedEvent">
            <summary>
            ViewboxChangedEvent RoutedEvent
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.ViewboxAnimationCompletedEvent">
            <summary>
            ViewboxAnimationCompletedEvent RoutedEvent
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.zoomStoryboard">
            <summary>
            zoomStoryboard
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.baseZoomPanel">
            <summary>
            baseZoomPanel
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.viewbox">
            <summary>
            viewbox
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.zoomRectangle">
            <summary>
            zoomRectangle
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.panCursor">
            <summary>
            panCursor
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.panCursorDown">
            <summary>
            panCursorDown
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.rectangleCursor">
            <summary>
            rectangleCursor
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.zoomInCursor">
            <summary>
            zoomInCursor
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.zoomOutCursor">
            <summary>
            zoomOutCursor
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.OnContentChanged(System.Object,System.Object)">
            <summary>
            OnContentChanged is called each time the content of ZoomPanel is changed.
            </summary>
            <param name="oldContent">old content</param>
            <param name="newContent">new content</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.#ctor">
            <summary>
            Initializes a new instance of the ZoomPanel class.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.OnZoomPanelLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            OnZoomPanelLoaded method is called when the ZoomPanel is loaded. The method can be overriden.
            </summary>
            <param name="sender">sender</param>
            <param name="e">RoutedEventArgs</param>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ChangeZoomModeCommand">
            <summary>
            ChangeZoomModeCommand
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.SetMoveModeCommand">
            <summary>
            SetMoveModeCommand
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.SetZoomInModeCommand">
            <summary>
            SetZoomInModeCommand
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.SetZoomOutModeCommand">
            <summary>
            SetZoomOutModeCommand
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.SetRectangleModeCommand">
            <summary>
            SetRectangleModeCommand
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.SetNoneZoomModeCommand">
            <summary>
            SetNoneZoomModeCommand
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ResetCommand">
            <summary>
            ResetCommand
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ResetToLimitsCommand">
            <summary>
            ResetToLimitsCommand
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.MoveLeftCommand">
            <summary>
            MoveLeftCommand
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.MoveRightCommand">
            <summary>
            MoveRightCommand
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.MoveUpCommand">
            <summary>
            MoveUpCommand
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.MoveDownCommand">
            <summary>
            MoveDownCommand
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ProcessMoveCommand(System.Int32,System.Int32)">
            <summary>
            ProcessMoveCommand processes the move commands. The method can be overridden to provide custom movement.
            </summary>
            <param name="dx">-1: move left, +1: move right</param>
            <param name="dy">-1: move up, +1: move down</param>
            <remarks>
            <para>
            The original method content looks like:
            </para>
            <code>
            TranslateRelative(dx * 0.1, dy * 0.1);
            </code>
            <para>
            The method can be overridden to provide custom movement when move commands are used.
            </para>
            </remarks>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.OnApplyTemplate">
            <summary>
            OnApplyTemplate
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.InitializeCursors">
            <summary>
            Initialized cursors.
            This method is marked as virtual and can be overridden to define different cursors.
            Note: if you only need to change one of the cursors, define it in the overridden method and than call base.InitializeCursors to define all others as well.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.Viewbox">
            <summary>
            Gets or sets the current viewbox as Rect used to determine which part of ZoomPanel's content is shown.
            </summary>
            <remarks>
            <para>
            Viewbox defines which area of the ZoomPanel content will be shown. For example (0.5, 0, 0.5, 1) will show only the right half of the content.
            </para> 
            <para>
            See <see cref="T:Ab2d.Controls.ViewboxEx"/> and its samples for more details about Viewbox values.
            </para>
            <para>
            Setting Viewbox is the same as calling <see cref="M:Ab2d.Controls.ZoomPanel.SetViewbox(System.Windows.Rect)"/> method.
            </para>
            <para>
            To change the value of viewbox immediately (regardless of <see cref="P:Ab2d.Controls.ZoomPanel.IsAnimated"/> property, use the <see cref="M:Ab2d.Controls.ZoomPanel.SetViewboxNow(System.Windows.Rect)">SetViewboxNow</see> method.
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.IsCustomContent">
            <summary>
            Gets a value that indicates if ZoomPanel is currently in custom content mode.
            </summary>
            <remarks>
            If false (default) the ZoomPanel zooms and pans the content of the ZoomPanel with applying Transformation to the content.
            If true the user of ZoomPanel provides a custom content (UIElement) each time the <see cref="P:Ab2d.Controls.ZoomPanel.Viewbox"/> property is changed. ZoomPanel is registered to show custom content with <see cref="M:Ab2d.Controls.ZoomPanel.RegisterCustomContentProvider(Ab2d.Controls.ZoomPanel.CustomContentProviderDelegate,System.Windows.Size)">RegisterCustomContentProvider</see> method.
            </remarks>
        </member>
        <member name="T:Ab2d.Controls.ZoomPanel.CustomContentProviderDelegate">
            <summary>
            Delegate declaration used for to register ZoomPanel to show custom content.
            </summary>
            <remarks>
            ZoomPanel is registered to show custom content with <see cref="M:Ab2d.Controls.ZoomPanel.RegisterCustomContentProvider(Ab2d.Controls.ZoomPanel.CustomContentProviderDelegate,System.Windows.Size)">RegisterCustomContentProvider</see> method.
            </remarks>
            <param name="relativeCustomContentViewbox">current viewbox relative to custom content.</param>
            <param name="absoluteCustomContentViewbox">current viewbox in absolute units of custom content.</param>
            <param name="zoomFactor">zoom level: 1=no zoom, 2=one half of the content shown (100% zoom)</param>
            <param name="availableSize">target content size</param>
            <returns>Custom content as UIElement that will be shown by the ZoomPanel</returns>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.IsTouchEnabledProperty">
            <summary>
            IsTouchEnabledProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.IsTouchEnabled">
            <summary>
            Gets or sets a boolean that specifies if touch and multi-touch control is enabled. Default value is true.
            </summary>
            <remarks>
            <para>
            <b>IsTouchEnabled</b> gets or sets a boolean that specifies if touch and multi-touch control is enabled. Default value is true (in .net 4 build of ZoomPanel).
            </para>
            <para>
            You can control which touch and multi-touch operations are enabled by setting <see cref="P:Ab2d.Controls.ZoomPanel.IsTouchMoveEnabled"/>, <see cref="P:Ab2d.Controls.ZoomPanel.IsTouchScaleEnabled"/> and <see cref="P:Ab2d.Controls.ZoomPanel.IsTouchRotateEnabled"/>.
            By default all operations are enabled.
            </para>
            <para>
            NOTE:<br/>
            Touch and multi-touch control is supported only with using .Net 4 build of ZoomPanel (or newer) and does not work in .Net 3.5 build of ZoomPanel.
            </para>
            </remarks>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.IsTouchMoveEnabledProperty">
            <summary>
            IsTouchMoveEnabledProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.IsTouchMoveEnabled">
            <summary>
            Gets or sets a boolean that specifies if moving with touch is enabled. Default value is true.
            NOTE: Touch controls work only with .Net 4 build of ZoomPanel (or newer).
            </summary>
            <remarks>
            <para>
            <b>IsTouchMoveEnabled</b> gets or sets a boolean that specifies if moving with touch is enabled. Default value is true.
            </para>
            <para>
            The "master switch" to enable or disable touch and multi-touch controls is the <see cref="P:Ab2d.Controls.ZoomPanel.IsTouchEnabled"/> property.
            </para>        
            <para>
            NOTE:<br/>
            Touch and multi-touch control is supported only with using .Net 4 build of ZoomPanel (or newer) and does not work in .Net 3.5 build of ZoomPanel.
            </para>
            </remarks>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.IsTouchScaleEnabledProperty">
            <summary>
            IsTouchScaleEnabledProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.IsTouchScaleEnabled">
            <summary>
            Gets or sets a boolean that specifies if scaling with multi-touch pinch is enabled. Default value is true.
            NOTE: Touch controls work only with .Net 4 build of ZoomPanel (or newer).
            </summary>
            <remarks>
            <para>
            <b>IsTouchScaleEnabled</b> gets or sets a boolean that specifies if scaling with multi-touch pinch is enabled. Default value is true.
            </para>
            <para>
            The "master switch" to enable or disable touch and multi-touch controls is the <see cref="P:Ab2d.Controls.ZoomPanel.IsTouchEnabled"/> property.
            </para>        
            <para>
            NOTE:<br/>
            Touch and multi-touch control is supported only with using .Net 4 build of ZoomPanel (or newer) and does not work in .Net 3.5 build of ZoomPanel.
            </para>
            </remarks>        
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel.IsTouchRotateEnabledProperty">
            <summary>
            IsTouchRotateEnabledProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.IsTouchRotateEnabled">
            <summary>
            Gets or sets a boolean that specifies if rotating with multi-touch is enabled. Default value is true.
            NOTE: Touch controls work only with .Net 4 build of ZoomPanel (or newer).
            </summary>  
            <remarks>
            <para>
            <b>IsTouchRotateEnabled</b> gets or sets a boolean that specifies if rotating with multi-touch is enabled. Default value is true.
            </para>
            <para>
            The "master switch" to enable or disable touch and multi-touch controls is the <see cref="P:Ab2d.Controls.ZoomPanel.IsTouchEnabled"/> property.
            </para>        
            <para>
            NOTE:<br/>
            Touch and multi-touch control is supported only with using .Net 4 build of ZoomPanel (or newer) and does not work in .Net 3.5 build of ZoomPanel.
            </para>
            </remarks>             
        </member>
        <member name="E:Ab2d.Controls.ZoomPanel.ZoomModeChanged">
            <summary>
            ZoomModeChanged occurs when ZoomMode is changed
            </summary>
        </member>
        <member name="E:Ab2d.Controls.ZoomPanel.PreviewViewboxChanged">
            <summary>
            PreviewViewboxChanged occurs before the Viewbox or RotationAngle is changed.
            The event can be used to prevent the change of viewbox or RotationAngle (set Handled property to true), or change the new viewbox  or RotationAngle before the change is applied.
            </summary>
        </member>
        <member name="E:Ab2d.Controls.ZoomPanel.ViewboxChanged">
            <summary>
            ViewboxChanged occurs after the Viewbox value is changed. If the zooming is animated the event fires when the animation begins - the NewValue is not the current Viewbox value but the final value when the animation will be completed.
            </summary>
        </member>
        <member name="E:Ab2d.Controls.ZoomPanel.ViewboxAnimationCompleted">
            <summary>
            ViewboxAnimationCompleted occurs after the animation that changed the Viewbox is completed (if Viewbox change was not animated, this event is not fired).
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ZoomMode">
            <summary>
            Gets or sets the current zoom mode of the ZoomPanel.
            </summary>
            <remarks>
            <para>
            The following zoom modes are supported:
            </para>
            <list type="table">
                <listheader>
                    <term>ZoomMode</term>
                    <description>description</description>
                </listheader>
                <item>
                    <term>None</term>
                    <description>No zoom.</description>
                </item>
                <item>
                    <term>Move</term>
                    <description>The content can be moved with the mouse.</description>
                </item>
                <item>
                    <term>Rectangle</term>
                    <description>The part of the content that is show can be selected with the rectangle.</description>
                </item>
                <item>
                    <term>ZoomIn</term>
                    <description>Mouse click zooms in the content.</description>
                </item>
                <item>
                    <term>ZoomOut</term>
                    <description>Mouse click zooms out the content.</description>
                </item>            
            </list>
            </remarks>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.IsAnimated">
            <summary>
            If True than zoom changes are animated. Default value is true.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.IsPanningAnimated">
            <summary>
            If true than also mouse panning is animated, if false mouse panning has immediate effect. Default value is false.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.AnimationDuration">
            <summary>
            Duration of zoom change animation. Default value is 200 milliseconds.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.MouseWheelZoomFactor">
            <summary>
            Gets or sets the zoom factor that is applied to mouse wheel zooming.
            The value must be bigger or equal than 1. This value is used for zoom in factor. The zoom out factor is calculated in GetZoomOutFactor method as 1 / zoom factor (can be overridden in derived class).
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ZoomInOutFactor">
            <summary>
            Gets or sets the zoom in and out factor for ZoomIn and ZoomOut mode.
            The value must be bigger or equal than 1. This value is used for zoom in factor. The zoom out factor is calculated in GetZoomOutFactor method as 1 / zoom factor (can be overridden in derived class).
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.IsZoomPositionPreserved">
            <summary>
            Gets or sets a Boolean that specifies if the position of the point where zooming in or out occurs is preserved. If false than zooming is also centering the zooming point. Default value is true.
            </summary>
            <remarks>
            <para>
            IsZoomPointPreserved property is used when ZoomPanel is used to zoom in or out while in ZoomIn or ZoomOut mode or when mouse wheel is used to zoom.
            </para>
            <para>
            If IsZoomPointPreserved property is set to <b>false</b> than the position where the zoom in or out occurred is also moved to the center of the ZoomPanel.
            </para>
            <para>
            By <b>default</b> IsZoomPointPreserved property is set to <b>true</b>. This means that the position where the zoom in or out occurred stays at the same position.
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.IsMouseWheelZoomEnabled">
            <summary>
            Gets or sets if zooming with mouse wheel is enabled or disabled. Default value is true (enabled).
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.IsToggleZoomModeEnabled">
            <summary>
            Gets or sets if zoom mode toggling is enabled. If true than when setting zoom mode once again to the current zoom mode, the zoom mode goes to None.
            This is useful for ZoomControllers when for example clicking for the first time on Move button sets the ZoomMode to Move. Clicking on Move button again disables Move mode - goes to None ZoomMode.
            Default value is true (enabled).
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.RectangleStroke">
            <summary>
            Stroke of the Rectangle used in Rectangle ZoomMode.
            Default value is Blue.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.RectangleFill">
            <summary>
            Fill Brush of the Rectangle used in Rectangle ZoomMode.
            Default value is #46AAAAFF - semi-transparent light blue.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ViewboxLimits">
            <summary>
            Gets or sets the System.Rect that limits the maximum Viewbox size used by ZoomPanel - the maximum zoom out level.
            </summary>
            <remarks>
            <para>
            By default the content of the ZoomPanel can be freely zoomed in and out and panned to any direction. But it is possible to limit this by <see cref="P:Ab2d.Controls.ZoomPanel.ViewboxLimits"/>, <see cref="P:Ab2d.Controls.ZoomPanel.ViewboxMinSize"/> and <see cref="P:Ab2d.Controls.ZoomPanel.IsViewboxLimited"/>.
            The <see cref="P:Ab2d.Controls.ZoomPanel.ViewboxLimits"/> sets the maximum Viewbox size used by ZoomPanel - maximum zoom out level. The <see cref="P:Ab2d.Controls.ZoomPanel.ViewboxMinSize"/> sets the minimum Viewbox size used by ZoomPanel - maximum zoom in level.
            </para>
            <para>
            For example the value "0 0 1 1" as ViewboxLimits limits the zoom out to show all the content of the ZoomPanel.
            </para>
            <para>
            The value "-0.1 -0.1 1.2 1.2" allows zoom out to the point where 10% empty space is shown around the zoom content (showing 120% of the whole content).
            </para>
            <para>
            Viewbox limits are effective only if <see cref="P:Ab2d.Controls.ZoomPanel.IsViewboxLimited"/> property is true.
            </para>
            </remarks>        
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ViewboxMinSize">
            <summary>
            Gets or sets the System.Size that limits the Viewbox minimum size used by ZoomPanel - the maximum zoom in level.
            </summary>
            <remarks>
            <para>
            By default the content of the ZoomPanel can be freely zoomed in and out and panned to any direction. But it is possible to limit this by <see cref="P:Ab2d.Controls.ZoomPanel.ViewboxLimits"/>, <see cref="P:Ab2d.Controls.ZoomPanel.ViewboxMinSize"/> and <see cref="P:Ab2d.Controls.ZoomPanel.IsViewboxLimited"/>.
            The <see cref="P:Ab2d.Controls.ZoomPanel.ViewboxLimits"/> sets the maximum Viewbox size used by ZoomPanel - maximum zoom out level. The <see cref="P:Ab2d.Controls.ZoomPanel.ViewboxMinSize"/> sets the minimum Viewbox size used by ZoomPanel - maximum zoom in level.
            </para>
            <para>
            For example the value "0.1 0.1" prevent zooming in for more than to show 10% x 10% of the whole content.
            </para>
            <para>
            Viewbox limits are effective only if <see cref="P:Ab2d.Controls.ZoomPanel.IsViewboxLimited"/> property is true.
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.IsViewboxLimited">
            <summary>
            Gets or sets a Boolean value that specifies if ViewboxLimits is used to limit the ZoomPanel.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.RotationAngle">
            <summary>
            Gets or sets the rotation angle in degrees, that determines the angle with witch the content of the ZoomPanel is rotated around the center of the ZoomPanel.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ZoomFactor">
            <summary>
            Gets or sets the zoom factor that defines how much the content of the ZoomPanel is scaled (1 - no scale; &gt;1 - zoom in; &lt;1 - zoom out).
            </summary>
            <remarks>
            <para>
            <b>ZoomFactor</b> gets or sets the zoom factor that defines how much the content of the ZoomPanel is scaled.
            </para>
            <para>
            When ZoomFactor is 1, than the whole content will be shown in the ZoomPanel. If the content size is 100 x 100, this does not mean that the shown size will be also 100 x 100 - the shown size will depend of the size of ZoomPanel. It its size is 200 x 300, than the content's size will be 200 x 200.
            </para>
            <para>
            When ZoomFactor is more than 1, the content is bigger - not the whole content is visible. Note that ZoomFactor is a one dimensional zoom factor. This means that when for example zoom factor is 2, only 50 x 50 pixels will be visible from the whole 100 x 100 - the width and height are both "scaled" by 2.
            </para>
            <para>
            When ZoomFactor is less than 1, the content is smaller - there is an empty space added around the shown content.
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.Stretch">
            <summary>
            Gets or sets the ZoomPanel System.Windows.Media.Stretch
            mode, which determines how content fits into the available space.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ScrollLineSizeInPercent">
            <summary>
            Size in percent of the line when scrolling with ScrollViewer. The size is used when the bottom, up, left or right arrow on scroll slider is clicked.
            When scrolling with mouse wheel, the line size is multiplied with the value of scroll wheel settings from Control Panel.
            For example 0.1 scrolls the content of ZoomPanel by 10%.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ActualContentBounds">
            <summary>
            Gets the Bounds of the contents of a ZoomPanel after the transformation were applied to it.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ActualViewbox">
            <summary>
            Gets the Rect that describes the area of the content that is actually visible on the screen.
            </summary>
            <remarks>
            <para>
            ActualViewbox value can be different from <see cref="P:Ab2d.Controls.ZoomPanel.Viewbox"/> because of different aspect ratios of the ViewboxEx, content and Viewbox.
            </para>
            <para>
            For example if we are showing a 100 x 100 Rectangle inside 200 x 100 ViewboxEx and Viewbox property is (0,0,1,1) than because ViewboxEx is wider as content Rectangle, 
            the Rectangle will be centered inside ViewboxEx with some empty space on the left and right. In this case the ActualViewbox would be (-0.5, 0, 2, 1).
            </para>
            <para>
            This would mean that the actually visible area is 2 times as wide as the Rectangle (ActualViewbox.Width = 2).
            The actually visible area is starting half the size of Rectangle to the left (ActualViewbox.X = 0.5).
            There is no empty space below or above the shown Rectangle (ActualViewbox.Y = 0 and ActualViewbox.Height = 1).
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.UsedViewboxEx">
            <summary>
            Gets the ViewboxEx control that is used to show the content of ZoomPanel.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.CenterPosition">
            <summary>
            Gets or sets the position that specifies which point of the content will be positioned in the center of the ZoomPanel. The value is in the units (Absolute / Relative) specified by the CenterPositionUnits property.
            </summary>
            <remarks>
            <para>
            <b>CenterPosition</b> gets or sets the position that specifies which point of the content will be positioned in the center of the ZoomPanel.
            The value is in the units (Absolute / Relative) specified by the <see cref="P:Ab2d.Controls.ZoomPanel.CenterPositionUnits"/> property.
            </para>
            <para>
            When the units are <b>Relative</b> the CenterPosition is specified relatively to the ZoomPanel's content. For example:<br/>
            (0.5 0.5) means the center point of the content,<br/>
            (1.0 0.5) means the most right point in the vertical center of the content,<br/>
            (0.2 0.3) means a point that is 20% right from the left edge and 30% down from the top of the content.
            </para>
            <para>
            When the units are <b>Absolute</b> the CenterPosition is defined by the size of the content.
            For example the point (100 200) means that the point of the content that is at coordinates 100, 200 will be shown in the center of the ZoomPanel.
            </para>
            <para>
            With <b>CenterPosition</b> and <see cref="P:Ab2d.Controls.ZoomPanel.ZoomFactor"/> it is possible to define which area and at which zoom will be shown. 
            Both properties fully defined the <see cref="P:Ab2d.Controls.ZoomPanel.Viewbox"/>property that is internally used to define which part of the ZoomPanel will be used.
            </para>
            <para>
            Please note that when changing both CenterPosition and CenterPositionUnits, you need to firstly change the CenterPositionUnits. 
            This way the viewbox will be calculated from CenterPosition in the correct units.
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.CenterPositionUnits">
            <summary>
            Gets or sets units in which the CenterPosition is specified. Default value is Relative.
            </summary>
            <remarks>
            <para>
            <b>CenterPositionUnits</b> gets or sets units in which the CenterPosition is specified. 
            The possible values are defined by the <see cref="T:Ab2d.Controls.ZoomPanel.CenterPositionUnitsType"/> enum. 
            Default value is Relative.
            </para>
            <para>
            The units are used by the <see cref="P:Ab2d.Controls.ZoomPanel.CenterPosition"/> property.
            </para>
            <para>
            Please note that change of the units does not automatically change the value of <see cref="P:Ab2d.Controls.ZoomPanel.CenterPosition"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.InvalidateScrollInfo(System.Windows.Rect)">
            <summary>
            This method updates the ScrollInfo data based on the new value of viewbox. See IScrollInfo for more info.
            </summary>
            <remarks>
            The method sets the _scrollInfoViewport, _scrollInfoExtent and _scrollInfoOffset.
            </remarks>
            <param name="viewbox">viewbox value that is used to set the ScrollInfo data</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetHorizontalOffsetInternal(System.Double)">
            <summary>
            Changes the Viewbox value based on the new horizontal offset
            </summary>
            <param name="offset">new horizontal offset</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetVerticalOffsetInternal(System.Double)">
            <summary>
            Changes the Viewbox value based on the new vertical offset
            </summary>
            <param name="offset">new vertical offset</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ScrollForPercent(System.Double,System.Double)">
            <summary>
            Used with ScrollViewer to set the new scroll position. Called after page up/down, line up/down, etc. See IScrollInfo for more info.
            </summary>
            <param name="dx">dx as percent (-1 = one page left, +1 = one page right)</param>
            <param name="dy">dy as percent (-1 = one page up, +1 = one page% down)</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.MouseWheelDown">
            <summary>
            IScrollInfo.MouseWheelDown
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.MouseWheelLeft">
            <summary>
            IScrollInfo.MouseWheelLeft
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.MouseWheelRight">
            <summary>
            IScrollInfo.MouseWheelRight
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.MouseWheelUp">
            <summary>
            IScrollInfo.MouseWheelUp
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.LineDown">
            <summary>
            IScrollInfo.LineDown
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.LineLeft">
            <summary>
            IScrollInfo.LineLeft
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.LineRight">
            <summary>
            IScrollInfo.LineRight
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.LineUp">
            <summary>
            IScrollInfo.LineUp
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.PageDown">
            <summary>
            IScrollInfo.PageDown
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.PageLeft">
            <summary>
            IScrollInfo.PageLeft
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.PageRight">
            <summary>
            IScrollInfo.PageRight
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.PageUp">
            <summary>
            IScrollInfo.PageUp
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetHorizontalOffset(System.Double)">
            <summary>
            IScrollInfo.SetHorizontalOffset
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetVerticalOffset(System.Double)">
            <summary>
            IScrollInfo.SetVerticalOffset
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            IScrollInfo.MakeVisible
            </summary>
            <param name="visual">visual</param>
            <param name="rectangle">rectangle</param>
            <returns>rectangle</returns>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.CanHorizontallyScroll">
            <summary>
            IScrollInfo.CanHorizontallyScroll
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.CanVerticallyScroll">
            <summary>
            IScrollInfo.CanVerticallyScroll
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ScrollOwner">
            <summary>
            IScrollInfo.ScrollOwner
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ExtentHeight">
            <summary>
            IScrollInfo.ExtentHeight
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ExtentWidth">
            <summary>
            IScrollInfo.ExtentWidth
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ViewportHeight">
            <summary>
            IScrollInfo.ViewportHeight
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.ViewportWidth">
            <summary>
            IScrollInfo.ViewportWidth
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel._scrollInfoHorizontalOffset">
            <summary>
            _scrollInfoHorizontalOffset
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.HorizontalOffset">
            <summary>
            IScrollInfo.HorizontalOffset
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanel._scrollInfoVerticalOffset">
            <summary>
            _scrollInfoVerticalOffset
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.VerticalOffset">
            <summary>
            IScrollInfo.VerticalOffset
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanel.LicenseInfo">
            <summary>
            License information
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetViewbox(System.Windows.Rect,System.Boolean,System.Boolean)">
            <summary>
            Sets the viewbox relative to the ZoomPanel content.
            </summary>
            <param name="newViewbox">New Viewbox value as Rect</param>
            <param name="forceImmediateChange">If forceImmediateChange is true, the Viewbox is set immediately regardless of IsAnimated property</param>
            <param name="checkViewboxLimits">CheckViewboxLimits can be set to false if the newViewbox has already been adjusted or if the check needs to be skipped</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetViewbox(System.Windows.Rect,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Sets the viewbox relative to the ZoomPanel content.
            </summary>
            <param name="newViewbox">New Viewbox value as Rect</param>
            <param name="newRotationAngle">new RotationAngle</param>
            <param name="forceImmediateChange">If forceImmediateChange is true, the Viewbox is set immediately regardless of IsAnimated property</param>
            <param name="checkViewboxLimits">CheckViewboxLimits can be set to false if the newViewbox has already been adjusted or if the check needs to be skipped</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetViewbox(System.Windows.Rect)">
            <summary>
            Sets the viewbox relative to the ZoomPanel content.
            </summary>
            <param name="newViewbox">New Viewbox value as Rect</param>
            <remarks>
            <para>
            If the <see cref="P:Ab2d.Controls.ZoomPanel.IsAnimated"/> property is true, the viewbox change is animated. To always make immediate viewbox change use <see cref="M:Ab2d.Controls.ZoomPanel.SetViewboxNow(System.Windows.Rect)"/> method.
            </para>
            <para>
            Using this method is the same as setting the <see cref="P:Ab2d.Controls.ZoomPanel.Viewbox"/> property.
            </para>
            </remarks>        
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetViewboxNow(System.Windows.Rect)">
            <summary>
            Immediately sets the viewbox relative to the ZoomPanel content.
            </summary>
            <param name="newViewbox">New Viewbox value as Rect</param>
            <remarks>
            To male the Viewbox change animated if the <see cref="P:Ab2d.Controls.ZoomPanel.IsAnimated"/> property is true, use the <see cref="M:Ab2d.Controls.ZoomPanel.SetViewbox(System.Windows.Rect)"/> method.
            </remarks>          
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetZoom(System.Windows.Rect)">
            <summary>
            Sets the zoom area to the new viewbox. If IsAnimated property is true, the zoom area change is animated.
            </summary>
            <remarks>
            <para>Sets the zoom area to the new viewbox.</para>
            <para>
            If the <see cref="P:Ab2d.Controls.ZoomPanel.IsAnimated"/> property is true, the viewbox change is animated. To always make immediate zoom area change use <see cref="M:Ab2d.Controls.ZoomPanel.SetZoomNow(System.Windows.Rect)"/> method.
            </para>
            </remarks>  
            <param name="viewbox">viewbox</param>
            <overloads>
            <summary>
            Sets the area visible with ZoomPanel. If IsAnimated property is true, the zoom area change is animated.
            </summary>
            <remarks>
            <para>
            <b>SetZoom</b> is the most common method to change the area visible with ZoomPanel. 
            </para>
            <para>
            If IsAnimated property is true, the zoom area change is animated.
            The <b>SetZoomNow</b> method is similar to this method except that the change is not animated.
            </para>
            <para>
            The method has many overloads that can be used to specify the new visible area by new viewbox, rotation angle, zoom factor and center position.
            </para>
            </remarks>
            <example>
            <para>
            The following example sets the new visible area to the right upper quarter of the content (position: 0.5, 0; size: 0.5, 0.5):
            </para>
            <code>
            ZoomPanel1.SetZoom(new Rect(0.5, 0, 0.5, 0.5));
            </code>         
            <para>
            The following example shows the same area but this time set with using zoom factor (4) and center position (0.75, 0.25):
            </para>
            <code>
            ZoomPanel1.SetZoom(new Point(0.75, 0.25), Ab2d.Controls.ZoomPanel.CenterPositionUnitsType.Relative, 4);
            </code>                 
            </example>
            </overloads>        
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetZoom(System.Windows.Rect,System.Double)">
            <summary>
            Sets the zoom area to the new viewbox. If IsAnimated property is true, the zoom area change is animated.
            </summary>
            <remarks>
            <para>Sets the zoom area to the new viewbox.</para>
            <para>new rotation angle</para>
            <para>
            If the <see cref="P:Ab2d.Controls.ZoomPanel.IsAnimated"/> property is true, the viewbox change is animated. To always make immediate zoom area change use <see cref="M:Ab2d.Controls.ZoomPanel.SetZoomNow(System.Windows.Rect)"/> method.
            </para>
            </remarks>  
            <param name="viewbox">viewbox</param>
            <param name="rotationAngle">new rotation angle</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetZoom(System.Double)">
            <summary>
            Sets the zoom area to the currently set CenterPosition and the zoomFactor parameter. If IsAnimated property is true, the zoom area change is animated.
            </summary>
            <remarks>
            <para>Sets the zoom area to the currently set CenterPosition and the zoomFactor parameter.</para>
            <para>
            If the <see cref="P:Ab2d.Controls.ZoomPanel.IsAnimated"/> property is true, the viewbox change is animated. To always make immediate zoom area change use <see cref="M:Ab2d.Controls.ZoomPanel.SetZoomNow(System.Double)"/> method.
            </para>
            </remarks> 
            <param name="zoomFactor">zoom factor (1 = no zoom; &gt;1 = zoom in; &lt;1 = zoom out)</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetZoom(System.Windows.Point)">
            <summary>
            Sets the zoom area to centerPosition parameter (in the current CenterPositionUnits) and the currently set ZoomFactor. If IsAnimated property is true, the zoom area change is animated.
            </summary>
            <remarks>
            <para>Sets the zoom area to the currently set CenterPosition and the zoomFactor parameter.</para>
            <para>
            If the <see cref="P:Ab2d.Controls.ZoomPanel.IsAnimated"/> property is true, the viewbox change is animated. To always make immediate zoom area change use <see cref="M:Ab2d.Controls.ZoomPanel.SetZoomNow(System.Windows.Point)"/> method.
            </para>
            </remarks>         
            <param name="centerPosition">center position (in the current CenterPositionUnits)</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetZoom(System.Windows.Point,System.Double)">
            <summary>
            Sets the zoom area to centerPosition parameter (in the current CenterPositionUnits) and the zoomFactor parameter. If IsAnimated property is true, the zoom area change is animated.
            </summary>
            <remarks>
            <para>Sets the zoom area to the currently set CenterPosition and the zoomFactor parameter.</para>
            <para>
            If the <see cref="P:Ab2d.Controls.ZoomPanel.IsAnimated"/> property is true, the viewbox change is animated. To always make immediate zoom area change use <see cref="M:Ab2d.Controls.ZoomPanel.SetZoomNow(System.Windows.Point,System.Double)"/> method.
            </para>
            </remarks>         
            <param name="centerPosition">center position</param>
            <param name="zoomFactor">zoom factor (1 = no zoom; &gt;1 = zoom in; &lt;1 = zoom out)</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetZoom(System.Windows.Point,Ab2d.Controls.ZoomPanel.CenterPositionUnitsType,System.Double)">
            <summary>
            Sets the zoom area based on centerPosition, units and zoomFactor parameters. If IsAnimated property is true, the viewbox change is animated.
            </summary>
            <remarks>
            <para>Sets the zoom area to the currently set CenterPosition and the zoomFactor parameter.</para>
            <para>
            If the <see cref="P:Ab2d.Controls.ZoomPanel.IsAnimated"/> property is true, the viewbox change is animated. To always make immediate viewbox change use <see cref="M:Ab2d.Controls.ZoomPanel.SetZoomNow(System.Windows.Point,Ab2d.Controls.ZoomPanel.CenterPositionUnitsType,System.Double)"/> method.
            </para>
            </remarks>         
            <param name="centerPosition">center position</param>
            <param name="units">units of the center position</param>
            <param name="zoomFactor">zoom factor (1 = no zoom; &gt;1 = zoom in; &lt;1 = zoom out)</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetZoom(System.Windows.Point,Ab2d.Controls.ZoomPanel.CenterPositionUnitsType,System.Double,System.Double)">
            <summary>
            Sets the zoom area based on centerPosition, units and zoomFactor parameters. If IsAnimated property is true, the viewbox change is animated.
            </summary>
            <remarks>
            <para>Sets the zoom area to the currently set CenterPosition and the zoomFactor parameter.</para>
            <para>
            If the <see cref="P:Ab2d.Controls.ZoomPanel.IsAnimated"/> property is true, the viewbox change is animated. To always make immediate viewbox change use <see cref="M:Ab2d.Controls.ZoomPanel.SetZoomNow(System.Windows.Point,Ab2d.Controls.ZoomPanel.CenterPositionUnitsType,System.Double)"/> method.
            </para>
            </remarks>         
            <param name="centerPosition">center position</param>
            <param name="units">units of the center position</param>
            <param name="zoomFactor">zoom factor (1 = no zoom; &gt;1 = zoom in; &lt;1 = zoom out)</param>
            <param name="rotationAngle">rotation angle</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetZoomNow(System.Windows.Rect)">
            <summary>
            Sets the zoom area to the new viewbox. The zoom area is changed immediately regardless of the IsAnimated property.
            </summary>
            <remarks>
            <para>Sets the zoom area to the new viewbox.</para>
            </remarks>  
            <param name="viewbox">viewbox</param>
            <overloads>
            <summary>
            Sets the area visible with ZoomPanel without animating the change.
            </summary>
            <remarks>
            <para>
            <b>SetZoomNow</b> is the most common method to change the area visible with ZoomPanel. 
            </para>
            <para>
            The method makes the change immediately without animating it.
            To animate the change use <b>SetZoom</b> method (make sure that the IsAnimated property is true).
            </para>
            <para>
            The method has many overloads that can be used to specify the new visible area by new viewbox, rotation angle, zoom factor and center position.
            </para>
            </remarks>
            <example>
            <para>
            The following example sets the new visible area to the right upper quarter of the content (position: 0.5, 0; size: 0.5, 0.5):
            </para>
            <code>
            ZoomPanel1.SetZoomNow(new Rect(0.5, 0, 0.5, 0.5));
            </code>         
            <para>
            The following example shows the same area but this time set with using zoom factor (4) and center position (0.75, 0.25):
            </para>
            <code>
            ZoomPanel1.SetZoomNow(new Point(0.75, 0.25), Ab2d.Controls.ZoomPanel.CenterPositionUnitsType.Relative, 4);
            </code>                 
            </example>
            </overloads>          
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetZoomNow(System.Windows.Rect,System.Double)">
            <summary>
            Sets the zoom area to the new viewbox. If IsAnimated property is true, the zoom area change is animated.
            </summary>
            <remarks>
            <para>Sets the zoom area to the new viewbox.</para>
            <para>new rotation angle</para>
            <para>
            If the <see cref="P:Ab2d.Controls.ZoomPanel.IsAnimated"/> property is true, the viewbox change is animated. To always make immediate zoom area change use <see cref="M:Ab2d.Controls.ZoomPanel.SetZoomNow(System.Windows.Rect)"/> method.
            </para>
            </remarks>  
            <param name="viewbox">viewbox</param>
            <param name="rotationAngle">new rotation angle</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetZoomNow(System.Double)">
            <summary>
            Sets the zoom area to the currently set CenterPosition and the zoomFactor parameter. The zoom area is changed immediately regardless of the IsAnimated property.
            </summary>
            <remarks>
            <para>Sets the zoom area to the currently set CenterPosition and the zoomFactor parameter.</para>
            </remarks> 
            <param name="zoomFactor">zoom factor (1 = no zoom; &gt;1 = zoom in; &lt;1 = zoom out)</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetZoomNow(System.Windows.Point)">
            <summary>
            Sets the zoom area to centerPosition parameter (in the current CenterPositionUnits) and the currently set ZoomFactor. The zoom area is changed immediately regardless of the IsAnimated property.
            </summary>
            <remarks>
            <para>Sets the zoom area to the currently set CenterPosition and the zoomFactor parameter.</para>
            </remarks>         
            <param name="centerPosition">center position (in the current CenterPositionUnits)</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetZoomNow(System.Windows.Point,System.Double)">
            <summary>
            Sets the zoom area to centerPosition parameter (in the current CenterPositionUnits) and the zoomFactor parameter. The zoom area is changed immediately regardless of the IsAnimated property.
            </summary>
            <remarks>
            <para>Sets the zoom area to the currently set CenterPosition and the zoomFactor parameter.</para>
            </remarks>         
            <param name="centerPosition">center position</param>
            <param name="zoomFactor">zoom factor (1 = no zoom; &gt;1 = zoom in; &lt;1 = zoom out)</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetZoomNow(System.Windows.Point,Ab2d.Controls.ZoomPanel.CenterPositionUnitsType,System.Double)">
            <summary>
            Sets the zoom area based on centerPosition, units and zoomFactor parameters. The zoom area is changed immediately regardless of the IsAnimated property.
            </summary>
            <remarks>
            <para>Sets the zoom area to the currently set CenterPosition and the zoomFactor parameter.</para>
            </remarks>         
            <param name="centerPosition">center position</param>
            <param name="units">units of the center position</param>
            <param name="zoomFactor">zoom factor (1 = no zoom; &gt;1 = zoom in; &lt;1 = zoom out)</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetZoomNow(System.Windows.Point,Ab2d.Controls.ZoomPanel.CenterPositionUnitsType,System.Double,System.Double)">
            <summary>
            Sets the zoom area based on centerPosition, units and zoomFactor parameters. The zoom area is changed immediately regardless of the IsAnimated property.
            </summary>
            <remarks>
            <para>Sets the zoom area to the currently set CenterPosition and the zoomFactor parameter.</para>
            </remarks>         
            <param name="centerPosition">center position</param>
            <param name="units">units of the center position</param>
            <param name="zoomFactor">zoom factor (1 = no zoom; &gt;1 = zoom in; &lt;1 = zoom out)</param>
            <param name="rotationAngle">rotation angle</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetZoom(System.Windows.Point,Ab2d.Controls.ZoomPanel.CenterPositionUnitsType,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Sets the zoom from the centerPosition and zoomFactor.
            </summary>
            <param name="centerPosition">center position</param>
            <param name="units">units of the center position</param>
            <param name="zoomFactor">zoom factor (1 = no zoom; &gt;1 = zoom in; &lt;1 = zoom out)</param>
            <param name="rotationAngle">rotation angle</param>
            <param name="forceImmediateChange">If forceImmediateChange is true, the Viewbox is set immediately regardless of IsAnimated property</param>
            <param name="checkViewboxLimits">CheckViewboxLimits can be set to false if the newViewbox has already been adjusted or if the check needs to be skipped</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.GetZoomFactor(System.Windows.Rect)">
            <summary>
            Returns the zoom factor from the specified viewbox as Rect.
            The method can be overridden to provide custom zoom factor calculations - for example exponential.
            </summary>
            <param name="viewbox">viewbox as Rect</param>
            <returns>zoom factor</returns>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.GetViewboxSizeFromZoomFactor(System.Double)">
            <summary>
            Gets viewbox size from zoom factor: for example if zoomFactor is 2, its returns 0.5 that is used for viewbox width and height.
            The method can be overridden to provide custom zoom factor calculations - for example exponential.
            </summary>
            <param name="zoomFactor">zoomFactor</param>
            <returns>double value that is used for viewbox width and height</returns>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.GetCenterPosition(System.Windows.Rect,Ab2d.Controls.ZoomPanel.CenterPositionUnitsType)">
            <summary>
            Returns center positions as Point in the specified units (relative or absolute) and from the specified viewbox.
            </summary>
            <remarks>
            <para>
            <b>GetCenterPosition</b> method returns center positions as Point in the specified units (relative or absolute) and from the specified viewbox.
            </para>
            <para>
            Note that if absolute units are used for center position, the DesiredSize of the currently set ZoomPanel's content is used to
            calculate absolute values from relative values.
            </para>
            </remarks>
            <param name="viewbox">viewbox as Rect</param>
            <param name="units">units as CenterPositionUnitsType</param>
            <returns>center positions as Point</returns>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.GetViewboxFromCenterAndZoomFactor(System.Windows.Point,Ab2d.Controls.ZoomPanel.CenterPositionUnitsType,System.Double)">
            <summary>
            Returns viewbox as Rect from the specified centerPosition, its units and zoomFactor.
            </summary>
            <remarks>
            <para>
            <b>GetViewboxFromCenterAndZoomFactor</b> method returns viewbox as Rect from the specified centerPosition, its units and zoomFactor.
            </para>
            <para>
            Note that if absolute units are used for center position, the DesiredSize of the currently set ZoomPanel's content is used to
            calculate absolute values from relative values.
            </para>
            <para>
            If viewbox cannot be get (for example when there is no content set), an Empty Rect is returned.
            </para>
            </remarks>
            <param name="centerPosition">centerPosition as Point</param>
            <param name="units">units as CenterPositionUnitsType</param>
            <param name="zoomFactor">zoomFactor as double</param>
            <returns>viewbox as Rect</returns>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.Refresh">
            <summary>
            Forces the ZoomPanel to immediately recalculate the visible area based on the current Viewbox settings.
            </summary>
            <remarks>
            <para>
            The visible area is calculated in ArrangeOverride method in ViewboxEx that is internally used by ZoomPanel. 
            </para>
            <para>
            ArrangeOverride is called automatically by the WPF on the next rendering pass. This means that it is not called immediately after the <see cref="P:Ab2d.Controls.ZoomPanel.Viewbox"/> on ZoomPanel is changed.
            To force that the area visible in ZoomPanel is immediately recalculated, call Refresh method.
            </para>
            </remarks>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.Reset">
            <summary>
            Resets the zoom and translation to show the whole content of ZoomPanel (Viewbox="0 0 1 1"). The method also resets the RotationAngle to 0.
            </summary>
            <remarks>
            <para>
            If the <see cref="P:Ab2d.Controls.ZoomPanel.IsAnimated"/> property is true, the reset is animated. To always make immediate reset use <see cref="M:Ab2d.Controls.ZoomPanel.ResetNow"/> method.
            </para>
            <para>
            To reset to Viewbox Limits use <see cref="M:Ab2d.Controls.ZoomPanel.ResetToLimits"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ResetNow">
            <summary>
            Immediately resets the zoom and translation to show the whole content of ZoomPanel (Viewbox="0 0 1 1"). The method also resets the RotationAngle to 0.
            </summary>
            <remarks>
            <para>
            To reset to Viewbox Limits use <see cref="M:Ab2d.Controls.ZoomPanel.ResetToLimitsNow"/> method.
            </para>
            </remarks>        
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ResetToLimits">
            <summary>
            Resets the zoom and translation to show the content of ZoomPanel based on the ViewboxLimits. If Viewbox is not limited (IsViewboxLimited == false), the method is the same as <see cref="M:Ab2d.Controls.ZoomPanel.Reset"/> method. The method also resets the RotationAngle to 0.
            </summary>
            <remarks>
            <para>
            If the <see cref="P:Ab2d.Controls.ZoomPanel.IsAnimated"/> property is true, the reset is animated. To always make immediate reset use <see cref="M:Ab2d.Controls.ZoomPanel.ResetToLimitsNow"/> method.
            </para>
            <para>
            To reset the zoom and translation to show the whole content of ZoomPanel (Viewbox="0 0 1 1") use <see cref="M:Ab2d.Controls.ZoomPanel.Reset"/> method.
            </para>        
            </remarks>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ResetToLimitsNow">
            <summary>
            Resets the zoom and translation to show the whole content of ZoomPanel. The method also resets the RotationAngle to 0.
            </summary>
            <remarks>
            <para>
            To reset the zoom and translation to show the whole content of ZoomPanel (Viewbox="0 0 1 1") use <see cref="M:Ab2d.Controls.ZoomPanel.ResetNow"/> method.
            </para>        
            </remarks>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.FitToWidth">
            <summary>
            Sets the zoom and translation to show the whole width of the ZoomPanel's content.
            </summary>
            <remarks>
            <para>
            If the <see cref="P:Ab2d.Controls.ZoomPanel.IsAnimated"/> property is true, the change is animated.
            </para>        
            <para>
            To see the whole width defined by the Viewbox Limits use <see cref="M:Ab2d.Controls.ZoomPanel.FitToLimitsWidth"/> method.
            </para>
            </remarks>         
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.FitToLimitsWidth">
            <summary>
            Sets the zoom and translation to show the whole limits width of the ZoomPanel's content (if ZoomPanel is Limited)
            </summary>
            <remarks>
            <para>
            If the <see cref="P:Ab2d.Controls.ZoomPanel.IsAnimated"/> property is true, the change is animated.
            </para>         
            <para>
            To see the whole height defined by the Viewbox Limits use <see cref="M:Ab2d.Controls.ZoomPanel.FitToLimitsHeight"/> method.
            </para>
            </remarks>           
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.FitToHeight">
            <summary>
            Sets the zoom and translation to show the whole height of the ZoomPanel's content.
            </summary>
            <remarks>
            <para>
            If the <see cref="P:Ab2d.Controls.ZoomPanel.IsAnimated"/> property is true, the change is animated.
            </para>         
            </remarks>          
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.FitToLimitsHeight">
            <summary>
            Sets the zoom and translation to show the whole limits height of the ZoomPanel's content.
            </summary>
            <remarks>
            <para>
            If the <see cref="P:Ab2d.Controls.ZoomPanel.IsAnimated"/> property is true, the change is animated.
            </para>         
            </remarks>           
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ZoomToFactor(System.Double)">
            <summary>
            Zooms the scene to the zoomFactor regardless of the current zoomFactor. For example zoomFactor 2 shows app. 50% of the content, 4 shows 25% of the content.
            </summary>
            <param name="zoomFactor">zoomFactor</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ZoomForFactor(System.Double)">
            <summary>
            Zooms the scene for the zoomFactor. For example zoom factor 2 means that the currently shown scene is scaled for factor 2 (for 100%).
            </summary>
            <param name="zoomFactor">zoomFactor</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ZoomForRectangle(System.Windows.Point,System.Windows.Point)">
            <summary>
            Zooms and translates to show the content defined by startPoint and endPoint (coordinates in absolute units - from ZoomPanel's position and its ActualWidth and ActualHeight)
            </summary>
            <param name="startPoint">startPoint</param>
            <param name="endPoint">endPoint</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ZoomForRectangle(System.Windows.Rect)">
            <summary>
            Zooms and translates to show the content defined by newZoomRectangle (coordinates absolute units - from ZoomPanel's position and its ActualWidth and ActualHeight)
            </summary>
            <param name="newZoomRectangle">newZoomRectangle</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ZoomForRectangleRelative(System.Windows.Rect)">
            <summary>
            Zooms and translates to show the content defined by newZoomRectangle (coordinates in relative units - 1,1 is right bottom corner or ZoomPanel)
            </summary>
            <param name="newZoomRectangle">newZoomRectangle</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.UnregisterCustomContentProvider">
            <summary>
            Unregisters the ZoomPanel control from custom content provider - from now on the ZoomPanel will use ViewboxEx to apply scale and translate transforms to its content
            </summary>
            <remarks>
            ZoomPanel is registered to show custom content with <see cref="M:Ab2d.Controls.ZoomPanel.RegisterCustomContentProvider(Ab2d.Controls.ZoomPanel.CustomContentProviderDelegate,System.Windows.Size)">RegisterCustomContentProvider</see> method.
            </remarks>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.RegisterCustomContentProvider(Ab2d.Controls.ZoomPanel.CustomContentProviderDelegate,System.Windows.Size)">
            <summary>
            Registers the ZoomPanel control to show custom content.
            With custom content the ZoomPanel does not apply scale and translate transform to its content but instead calls the customContentProvider delegate that returns the custom content based on the current zoom parameters.
            </summary>
            <remarks>
            <para>
            In normal mode the ZoomPanel applies the scale and translate transform to the ZoomPanel's content.
            With calling the <see cref="M:Ab2d.Controls.ZoomPanel.RegisterCustomContentProvider(Ab2d.Controls.ZoomPanel.CustomContentProviderDelegate,System.Windows.Size)">RegisterCustomContentProvider</see> method, the ZoomPanel goes to custom content mode, which means that each time the <see cref="P:Ab2d.Controls.ZoomPanel.Viewbox"/> is changed (zoom is changed), the custom customContentProvider delegate is called to get the content that will be shown.
            </para>
            <para>
            This is useful when the content is not static, but instead it is rendered based on the current zoom level.
            For example a map viewer shows the whole country map when no zoom is applied but when user zooms into the map the streets of a city can be shown.
            </para>
            <para>
            customContentProvider delegate is called with the following parameters:
            <list type="table">
                <listheader>
                    <term>parameter</term>
                    <description>description</description>
                </listheader>
                <item>
                    <term>relativeCustomContentViewbox</term>
                    <description>The area as System.Windows.Rect in relative coordinates that needs to be shown.</description>
                </item>
                <item>
                    <term>absoluteCustomContentViewbox</term>
                    <description>The area as System.Windows.Rect in absolute coordinates that needs to be shown. The absolute coordinates are based on the customContentSize that are provided with the <see cref="M:Ab2d.Controls.ZoomPanel.RegisterCustomContentProvider(Ab2d.Controls.ZoomPanel.CustomContentProviderDelegate,System.Windows.Size)">RegisterCustomContentProvider</see> method.</description>
                </item>
                <item>
                    <term>zoomLevel</term>
                    <description>
                        ZoomLevel is calculated from 1 / (relativeCustomContentViewbox.Width * relativeCustomContentViewbox.Height).<br/>
                        It is used to simplify deciding what kind of custom content to show (for example: country, city, street)<br/>
                        <br/>
                        Example of some of the zoomLevel values:<br/>
                        zoomLevel = 1: no zoom applied, the whole content is shown<br/>
                        zoomLevel = 4: only 1/4 of the whole content is shown<br/>
                        zoomLevel = 10: only 1/10 of the content is shown<br/>
                        zoomLevel = 0.5 the shown area is twice as big as the custom content - the whole custom content is shown in the half of the available space<br/>
                    </description>
                </item>        
                <item>
                    <term>availableSize</term>
                    <description>The size that is available to show the custom content. The customContentProvider delegate should return the UIElement with the same size. If the size of the returned UIElement is different, it is scaled to fill the available size.</description>
                </item>
            </list>
            </para>
            <para>
            Examples for customContentSize is 2048 x 1024:<br/>
            <br/>
            relativeCustomContentViewbox = (0.5, 0, 0.5, 1)<br/>
            absoluteCustomContentViewbox = (1024, 0, 1024, 1024)<br/>
            zoomLevel = 2.0<br/>
            availableSize = (100, 100)<br/>
            The customContentProvider delegate should return the right half of the whole content as a UIElement with 100 x 100 points.<br/>
            <br/>
            relativeCustomContentViewbox = (0.45, 0.45, 0.1, 0.1)<br/>
            absoluteCustomContentViewbox = (921.5, 460.8, 204.8, 102.4)<br/>
            zoomLevel = 100.0<br/>
            availableSize = (100, 100)<br/>
            The customContentProvider delegate should return the center part of the whole content with 10-times zoom applied (the width and height are 0.1 - 10% of the whole available size)<br/>
            <br/>
            relativeCustomContentViewbox = (0, -1, 1, 3)<br/>
            absoluteCustomContentViewbox = (0, -1024, 2048, 3072)<br/>
            zoomLevel = 0.33<br/>
            availableSize = (200, 300)<br/>
            <br/>
            <strong>Important</strong><br/>
            In the last example the content that needs to be shown is 3 times higher than the whole custom content.<br/>
            The reason to this is that the 2048 x 1024 image needs to be shown in 200 x 300 area.
            To do this the whole content is shown in the center of the ZoomPanel, but the area above and below the content is empty.<br/>
            The following image illustrates this scenario:<br/>
            <img src="customContentAspect.png"/><br/>
            The blue rectangle represents the 2048 x 1024 content scaled to fit inside the 200 x 300 area (the rectangle with black stroke). To show the content, there needs to be 100 x 100 white pixels above and below the custom content.<br/>
            In this case the customContentProvider delegate should return a UIElement as it will be shown in the ZoomPanel - including the empty areas above and below the content.
            </para>
            </remarks>
            <example>
            The following example shows part of the code to provide the custom content to ZoomPanel.
            <code>
            public ZoomPanelCustomContent()
            {
                InitializeComponent();
            
                // ZoomPanel1 is defined in xaml
                ZoomPanel1.RegisterCustomContentProvider(MyCustomContentProvider, new Size(2048, 1024));
            }        
            
            private UIElement MyCustomContentProvider(Rect relativeCustomContentViewbox, Rect absoluteCustomContentViewbox, double zoomLevel, Size availableSize)
            {
                UIElement customContent;
                
                // TODO: Add code to create the custom content base on relativeCustomContentViewbox, absoluteCustomContentViewbox, zoomLevel and availableSize
                
                return customContent;
            }
            </code>
            </example>
            <param name="customContentProvider">customContentProvider delegate that will return the custom content</param>
            <param name="customContentSize">size of the custom content</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.CalculateVisibleArea(System.Windows.Rect@,System.Windows.Rect@)">
            <summary>
            Calculates the visible area that would be shown if ZoomPanel.Viewbox would be (0,0,1,1).
            </summary>
            <remarks>
            <para>
            This method calculates the visible area that is would be shown if ZoomPanel.Viewbox would be (0,0,1,1).
            </para>
            <para>
            The relativeVisibleArea is different from the <see cref="P:Ab2d.Controls.ZoomPanel.Viewbox"/> because the Viewbox property does not reflect the
            different aspect ration of ZoomPanel and its content. The relativeVisibleArea reflects how much empty space is around the content when the whole content is shown (Viewbox=0,0,1,1).
            </para>
            </remarks>
            <example>
            <para>
            ZoomPanel size: width = 200, height = 300<br/>
            Content size: width = 2000, height = 1000<br/>
            </para>
            <para>
            Results:<br/>
            relativeVisibleArea = (0, -1, 1, 3) - the height is increased 3 times to show the whole content<br/>
            absoluteVisibleArea = (0, -1000, 2000, 3000) - in content units the size of the whole shown area is 2000 x 3000
            </para>
            </example>
            <param name="relativeVisibleArea">out: relativeVisibleArea</param>
            <param name="absoluteVisibleArea">out: absoluteVisibleArea in the coordinates of the content</param>
            <returns>if false the visible area cannot be calculated</returns>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.Translate(System.Double,System.Double)">
            <summary>
            Translates the content by the dx and dy (in absolute units)
            </summary>
            <param name="dx">dx</param>
            <param name="dy">dy</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.TranslateNow(System.Double,System.Double)">
            <summary>
            Translates the content by the dx and dy (in absolute units).
            </summary>
            <param name="dx">dx</param>
            <param name="dy">dy</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.TranslateRelative(System.Double,System.Double)">
            <summary>
            Translates the content by the dx and dy (in relative units: 1 is the whole width/height of ZoomPanel)
            </summary>
            <param name="dx">dx</param>
            <param name="dy">dy</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.TranslateToCenter(System.Windows.Point)">
            <summary>
            Translates the content of ZoomPanel so that the mouseNewCenterPoint is shown in the center of ZoomPanel.
            </summary>
            <param name="mouseNewCenterPoint">mouseNewCenterPoint</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.TranslateToCenterRelative(System.Windows.Point)">
            <summary>
            Translates the content of ZoomPanel so that the mouseNewCenterPoint is shown in the center of ZoomPanel.
            newRelativeCenterPoint is in relative coordinates - (0.5, 0.5) is the center of ZoomPanel
            </summary>
            <param name="newRelativeCenterPoint">newRelativeCenterPoint</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ZoomAndTranslateToCenterRelative(System.Double,System.Windows.Point)">
            <summary>
            Zooms and translates the content of ZoomPanel so that the mouseNewCenterPoint is shown in the center of ZoomPanel.
            newRelativeCenterPoint is in relative coordinates - (0.5, 0.5) is the center of ZoomPanel
            </summary>
            <param name="zoomFactor">zoomFactor</param>
            <param name="newRelativeCenterPoint">newRelativeCenterPoint</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ZoomAndTranslateToCenter(System.Double,System.Windows.Point)">
            <summary>
            Zooms and translates the content of ZoomPanel so that the mouseNewCenterPoint is shown in the center of ZoomPanel.
            mouseNewCenterPoint is in absolute units.
            </summary>
            <param name="zoomFactor">zoomFactor</param>
            <param name="mouseNewCenterPoint">mouseNewCenterPoint</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ZoomAtRelativeMousePosition(System.Double,System.Windows.Point)">
            <summary>
            Zooms the content of ZoomPanel so that the mousePosition stays at the same location.
            relativeMousePosition is in relative coordinates - (0.5, 0.5) is the center of ZoomPanel.
            </summary>
            <param name="zoomFactor">zoomFactor</param>
            <param name="relativeMousePosition">relativeMousePosition</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.ZoomAtMousePosition(System.Double,System.Windows.Point)">
            <summary>
            Zooms the content of ZoomPanel so that the mousePosition stays at the same location.
            </summary>
            <param name="zoomFactor">zoomFactor</param>
            <param name="mousePosition">mousePosition</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.GetContentSize">
            <summary>
            Gets the size of the ZoomPanel's content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetZoomMode(Ab2d.Controls.ZoomPanel.ZoomModeType)">
            <summary>
            Sets the zoom mode to the newZoomMode. Also calls ZoomModeChangedEvent and set the cursor for new zoom mode.
            </summary>
            <param name="newZoomMode"></param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.OnZoomModeChanged(Ab2d.Controls.ZoomPanel.ZoomModeType,Ab2d.Controls.ZoomPanel.ZoomModeType)">
            <summary>
            Called when the zoom mode is changed and the rotation angle is preserved.
            </summary>
            <param name="oldZoomMode">oldZoomMode</param>
            <param name="newZoomMode">newZoomMode</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.OnViewboxChanged(System.Windows.Rect,System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Called when the inner viewbox.Viewbox is changed
            </summary>
            <param name="oldViewBox">oldViewBox</param>
            <param name="newViewBox">newViewBox</param>
            <param name="newRotationAngle">newRotationAngle</param>
            <param name="oldRotationAngle">oldRotationAngle</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.OnViewboxChanged(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Called when the inner viewbox.Viewbox is changed
            </summary>
            <param name="oldViewBox">oldViewBox</param>
            <param name="newViewBox">newViewBox</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.OnViewboxAnimationCompleted">
            <summary>
            Called when the Viewbox animation is completed
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.AttachMouseEvents">
            <summary>
            Attaches mouse events. This methods can be overridden to attach to some other control - for example to Window, etc.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.RefreshCursor">
            <summary>
            Set the cursor based on the current ZoomMode
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetCursor(System.Windows.Input.Cursor)">
            <summary>
            Sets the cursor on baseZoomPanel to the newCursor
            </summary>
            <param name="newCursor">newCursor</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.GetZoomOutFactor(System.Double)">
            <summary>
            Gets the zoom out zoom factor from zoom in factor. This method can be override to get it from some other value.
            </summary>
            <param name="zoomInFactor">zoomInFactor</param>
            <returns>zoomOutFactor</returns>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.StartAnimation(System.Windows.Rect)">
            <summary>
            Starts Viewbox animation from the current value to the to value. Using the current AnimationDuration
            </summary>
            <param name="to">target Rect</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.StartAnimation(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Starts Viewbox animation. Using the current AnimationDuration
            </summary>
            <param name="from">start Rect</param>
            <param name="to">target Rect</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.StartAnimation(System.Windows.Rect,System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Starts Viewbox animation. Using the current AnimationDuration
            </summary>
            <param name="from">start Rect</param>
            <param name="to">target Rect</param>
            <param name="startRotationAngle">start RotationAngle</param>
            <param name="endRotationAngle">end RotationAngle</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.StartAnimation(System.Windows.Rect,System.Windows.Rect,System.TimeSpan)">
            <summary>
            Starts Viewbox animation.
            </summary>
            <param name="from">start Rect</param>
            <param name="to">target Rect</param>
            <param name="duration">animation duration as TimeSpan</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.StartAnimation(System.Windows.Rect,System.Windows.Rect,System.Double,System.Double,System.TimeSpan)">
            <summary>
            Starts Viewbox animation.
            </summary>
            <param name="from">start Rect</param>
            <param name="to">target Rect</param>
            <param name="startRotationAngle">start RotationAngle</param>
            <param name="endRotationAngle">end RotationAngle</param>
            <param name="duration">animation duration as TimeSpan</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.StopAnimation">
            <summary>
            Stops the current animation
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.FitToRect(System.Windows.Rect,System.Boolean)">
            <summary>
            Sets Viewbox to fit to targetRect. If isFitToWidth is false, than fit to height.
            </summary>
            <param name="targetRect">targetRect</param>
            <param name="isFitToWidth">if true fit to width, else fit to height</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.OnManipulationDelta(System.Object,System.Windows.Input.ManipulationDeltaEventArgs)">
            <summary>
            OnManipulationDelta handles the manipulation events. The method can be overriden.
            </summary>
            <param name="sender">sender</param>
            <param name="e">ManipulationDeltaEventArgs</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.SetLowQualityBitmapScalingMode">
            <summary>
            Checks if the ZoomPanel contains bitmap images and in this case sets BitmapScalingMode to LowQuality
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.RestoreBitmapScalingMode">
            <summary>
            Restores the BitmapScalingMode
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.GetZoomPanelContent">
            <summary>
            Gets the UIElement that is being scaled and translated by ZoomPanel
            </summary>
            <returns>ZoomPanel content as UIElement</returns>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanel.UpdateCustomContent(System.Windows.Rect)">
            <summary>
            The method calls the custom content provider with the newViewbox value and sets the returned content to the viewbox.Child.
            </summary>
            <param name="newViewbox">newViewbox</param>
        </member>
        <member name="T:Ab2d.Controls.ZoomPanelDump">
            <summary>
            ZoomPanelDump can be used to preview the Viewbox and other ZoomPanel property values.
            </summary>
            <summary>
            ZoomPanelDump
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelDump.ZoomPanel">
            <summary>
            Gets or sets a ZoomPanel that is used to preview its data.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanelDump.ZoomPanelProperty">
            <summary>
            ZoomPanelProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelDump.ShowAdditionalInfo">
            <summary>
            Gets or sets a boolean that specifies if additional info is shown.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanelDump.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanelDump.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Ab2d.Controls.ZoomPanelMiniMap">
            <summary>
            ZoomPanelMiniMap can show mini map from the ZoomPanel control.
            </summary>
            <remarks>
            <para>
            <img src="ZoomPanelMiniMap.png"/>
            </para>    
            <para>
            <b>ZoomPanelMiniMap</b> can show mini map from the ZoomPanel control.
            </para>
            <para>
            The control shows the whole content of the ZoomPanel in a smaller area. The rectangles on the MiniMap show the area that is currently shown by the ZoomPanel.
            </para>
            <para>
            ZoomPanelMiniMap uses <see cref="P:Ab2d.Controls.ZoomPanelMiniMap.TargetZoomPanel"/> property that tells which ZoomPanel is shown and controller by this ZoomPanelMiniMap.
            The <see cref="P:Ab2d.Controls.ZoomPanelMiniMap.TargetZoomPanel"/> property can be manually set from code or XAML (using TargetZoomPanel="{Binding ElementName=ZoomPanel1}").
            It can be also set with using <see cref="P:Ab2d.Controls.ZoomPanelMiniMap.TargetZoomPanelName"/> property and specifying the name of the ZoomPanel control.
            When TargetZoomPanel and TargetZoomPanelName are not set, the control can set the TargetZoomPanel automatically with searching the visual tree and finding the first ZoomPanel.
            The automatic discovery is turned on by default. It can be turned off with IsAutoZoomPanelFindingEnabled property.
            Note that specifying TargetZoomPanel is the most performance effective way.
            </para>
            <para>
            Default size of ZoomPanelMiniMap is 200 x 200. The size can be changed to any other size by specifying Width and Height properties.
            </para>
            <para>
            The ZoomPanelMiniMap shows the content of the target ZoomPanel and a rectangle that shows the currently visible area.
            The appearance of the rectangle and the masked area are controlled by the properties defined in the <see cref="T:Ab2d.Controls.BaseMiniMap"/> control which the ZoomPanelMiniMap is derived from.
            </para>
            <para>
            The <see cref="P:Ab2d.Controls.BaseMiniMap.RectangleStroke"/> sets the Stroke of the Rectangle (default value is Blue).
            The <see cref="P:Ab2d.Controls.BaseMiniMap.RectangleStrokeThickness"/> sets the StrokeThickness of the Rectangle (default value is 1).
            The <see cref="P:Ab2d.Controls.BaseMiniMap.MaskBrush"/> sets the Brush that is used to mask the area that is not visible (default value is #46AAAAFF - semi transparent blue).
            </para>
            <para>
            The ZoomPanelMiniMap can not only be used to show the content of the ZoomPanel but also to change the area that is shown by the ZoomPanel.
            It is possible to move the rectangle shown in the ZoomPanelMiniMap around with the mouse.
            This behavior can be enabled (default) or disabled with <see cref="P:Ab2d.Controls.BaseMiniMap.IsMovingViewboxEnabled"/> property.
            It is also possible to zoom in and out with mouse wheel while mouse is over the ZoomPanelMiniMap.
            This behavior can be enabled (default) or disabled with <see cref="P:Ab2d.Controls.ZoomPanelMiniMap.IsMouseWheelZoomEnabled"/> property.
            </para>
            </remarks>
            <example>
            <para>
            The following sample shows how to define ZoomPanel and a MiniMap:
            </para>
            <code lang="xml">
            &lt;Window x:Class="Ab2d.ZoomControlSample.ZoomPanelSample"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:ab2d="clr-namespace:Ab2d.Controls;assembly=Ab2d.Controls.ZoomPanel"&gt;
              &lt;Grid&gt;
                  &lt;ScrollViewer CanContentScroll="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto"&gt;
                      &lt;ab2d:ZoomPanel Name="myZoomPanel" Viewbox="0.2 0.2 0.6 0.6" IsAnimated="True" AnimationDuration="0:0:0.5"
                                      ViewboxLimits="-0.1 -0.1 1.2 1.2" ViewboxMinSize="0.1 0.1" IsViewboxLimited="True"&gt;
                          &lt;TextBlock&gt;12345&lt;/TextBlock&gt;
                      &lt;/ab2d:ZoomPanel&gt;
                  &lt;/ScrollViewer&gt;  
                  &lt;ab2d:ZoomController VerticalAlignment="Top" 
                                       HorizontalAlignment="Right"/&gt;
                                       
                  &lt;Border Grid.Column="1" VerticalAlignment="Top" HorizontalAlignment="Right" Background="White" 
                                          BorderBrush="Gray" BorderThickness="2"&gt;
                      &lt;StackPanel Orientation="Vertical" Margin="5"&gt;
                          &lt;TextBlock FontWeight="Bold" Margin="0 0 0 2"&gt;ZoomPanelMiniMap:&lt;/TextBlock&gt;
                          &lt;ab2d:ZoomPanelMiniMap IsMovingViewboxEnabled="True" IsMouseWheelZoomEnabled="True"
                                                 HorizontalAlignment="Left" VerticalAlignment="Bottom"/&gt;
                      &lt;/StackPanel&gt;
                  &lt;/Border&gt;     
                &lt;/Grid&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelMiniMap.TargetZoomPanel">
            <summary>
            Gets or sets a ZoomPanel control that is used to get the content of ZoomPanelMiniMap and position its rectangle.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanelMiniMap.TargetZoomPanelProperty">
            <summary>
            ViewboxExProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanelMiniMap.TargetZoomPanelNameProperty">
            <summary>
            TargetZoomPanelNameProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelMiniMap.TargetZoomPanelName">
            <summary>
            Gets or sets the name of the ZoomPanel that is shown with this ZoomPanelMiniMap.
            </summary>
            <remarks>
            It is also possible to set the ZoomPanel control with <see cref="P:Ab2d.Controls.ZoomPanelMiniMap.TargetZoomPanel"/>.
            If target ZoomPanel is not set with <see cref="P:Ab2d.Controls.ZoomPanelMiniMap.TargetZoomPanel"/> or <see cref="P:Ab2d.Controls.ZoomPanelMiniMap.TargetZoomPanelName"/>, it is discovered automatically.
            </remarks>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanelMiniMap.IsAutoZoomPanelFindingEnabledProperty">
            <summary>
            IsAutoZoomPanelFindingEnabledProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelMiniMap.IsAutoZoomPanelFindingEnabled">
            <summary>
            Gets or sets a Boolean which specifies that if <see cref="P:Ab2d.Controls.ZoomPanelMiniMap.TargetZoomPanel"/> or <see cref="P:Ab2d.Controls.ZoomPanelMiniMap.TargetZoomPanelName"/> properties are not manually set the first ZoomPanel is automatically found from the current UserControl, Page or Window. Default value is true.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelMiniMap.IsMouseWheelZoomEnabled">
            <summary>
            Gets or sets if zooming with mouse wheel is same as on ZoomPanel (null), enabled (true) or disabled (false). Default value is null - same as on ZoomPanel.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanelMiniMap.IsMouseWheelZoomEnabledProperty">
            <summary>
            IsMouseWheelZoomEnabledProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelMiniMap.CurrentIsMouseWheelZoomEnabled">
            <summary>
            Gets the current value of the IsMouseWheelZoomEnabled (also checked is the TargetZoomPanel is set).
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelMiniMap.CurrentIsMovingViewboxEnabled">
            <summary>
            Gets a current value of the IsMovingViewboxEnabled.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanelMiniMap.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanelMiniMap.FindZoomPanel">
            <summary>
            Tries to find the ZoomPanel in the logical tree. This method is called when the TragetZoomPanel or TragetZoomPanelName is not set.
            </summary>
            <returns>ZoomPanel if found else null</returns>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanelMiniMap.GetViewboxForClipRectangle">
            <summary>
            Returns ActualViewbox from ViewboxEx instead of Viewbox
            </summary>
            <returns>ActualViewbox from ViewboxEx</returns>
        </member>
        <member name="T:Ab2d.Controls.RectChangedEventHandler">
            <summary>
            RectChangedEventHandler delegate
            </summary>
            <param name="sender">sender</param>
            <param name="e">RectChangedEventArgs</param>
        </member>
        <member name="T:Ab2d.Controls.RectChangedEventArgs">
            <summary>
            Event args used to notify that the Rect has changed
            </summary>
        </member>
        <member name="P:Ab2d.Controls.RectChangedEventArgs.OldValue">
            <summary>
            Old Rect Value
            </summary>
        </member>
        <member name="P:Ab2d.Controls.RectChangedEventArgs.NewValue">
            <summary>
            New Rect Value.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.RectChangedEventArgs.#ctor(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Constructor
            </summary>
            <param name="oldValue">oldValue</param>
            <param name="newValue">newValue</param>
        </member>
        <member name="T:Ab2d.Controls.ViewboxChangedRoutedEventArgs">
            <summary>
            Routed event args used to notify that the current Viewbox value on ZoomPanel has changed
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxChangedRoutedEventArgs.OldViewboxValue">
            <summary>
            Old Viewbox Value
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxChangedRoutedEventArgs.NewViewboxValue">
            <summary>
            New Viewbox Value. If the value is changed, the changed value will be applied as the new Viewbox value
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxChangedRoutedEventArgs.OldRotationAngle">
            <summary>
            Old Rotation Angle
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxChangedRoutedEventArgs.NewRotationAngle">
            <summary>
            New Rotation Angle. If the value is changed, the changed value will be applied as the new RotationAngle value
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ViewboxChangedRoutedEventArgs.#ctor(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Constructor
            </summary>
            <param name="oldViewboxValue">oldViewboxValue</param>
            <param name="newViewboxValue">newViewboxValue</param>
        </member>
        <member name="M:Ab2d.Controls.ViewboxChangedRoutedEventArgs.#ctor(System.Windows.Rect,System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="oldViewboxValue">oldViewboxValue</param>
            <param name="newViewboxValue">newViewboxValue</param>
            <param name="oldRotationAngle">oldRotationAngle</param>
            <param name="newRotationAngle">newRotationAngle</param> 
        </member>
        <member name="T:Ab2d.Controls.ViewboxEx">
            <summary>
            ViewboxEx is a container control that extends the WPF's Viewbox control by additionally specifying
            the Viewbox property that defines the area that will be shown by the Viewbox.
            </summary>
            <remarks>
            <para>
            ViewboxEx is an upgrade to the WPF's Viewbox control.
            </para>
            <para>
            In addition to set the Stretch property of the Viewbox the ViewboxEx provide additional <see cref="P:Ab2d.Controls.ViewboxEx.Viewbox"/> property. It is a System.Windows.Rect type that specifies which part of the ViewboxEx content is shown.
            </para>
            <para>
            For example the Viewbox value "0 0 1 1" means that the whole content of the ViewboxEx will be shown - same as WPF's Viewbox.<br/>
            The value "0.5 0 0.5 1" means that only the right half of the content will be shown - x starting at 50%, y starting at 0%, width 50% and height 100%.<br/>
            The value "0.5 0.5 0.5 0.5" means that only the lower right quarter of the content will be shown.<br/>
            The value "-1 0 3 1" means that the ViewboxEx will show the area that is 3 times wider than its content - so the content will be shown in the middle of the ViewboxEx and there will be an empty area to the left and right of the content.
            </para>
            </remarks>
            <example>
            The following example defines a Button that starts a RectAnimation of a VieboxEx's Viewbox.
            <code lang="xml">
            &lt;Window x:Class="Ab2d.ZoomControlSample.ZoomPanelSample"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:ab2d="clr-namespace:Ab2d.Controls;assembly=Ab2d.Controls.ZoomPanel"&gt;
              &lt;Grid&gt;
                 &lt;Button Name="StartStoryboardButton" VerticalAlignment="Top" HorizontalAlignment="Left"&gt;Start Animation
                      &lt;Button.Triggers&gt;
                          &lt;EventTrigger RoutedEvent="Button.Click"&gt;
                              &lt;EventTrigger.Actions&gt;
                                  &lt;BeginStoryboard&gt;
                                      &lt;Storyboard Name="XamlRectStoryboard"&gt;
                                          &lt;ab2d:RectAnimation From="0 0 1 1" To="0.2 0.2 0.6 0.6" Duration="0:0:4"
                                                  Storyboard.TargetName="Viewbox1" Storyboard.TargetProperty="Viewbox"/&gt;
                                          &lt;ab2d:RectAnimation To="0.5 0.4 0.2 0.2" BeginTime="0:0:4" Duration="0:0:4"
                                                  Storyboard.TargetName="Viewbox1" Storyboard.TargetProperty="Viewbox"/&gt;
                                          &lt;ab2d:RectAnimation To="0 0 1 1" BeginTime="0:0:8" Duration="0:0:2"
                                                  Storyboard.TargetName="Viewbox1" Storyboard.TargetProperty="Viewbox"/&gt;
                                      &lt;/Storyboard&gt;
                                  &lt;/BeginStoryboard&gt;
                              &lt;/EventTrigger.Actions&gt;
                          &lt;/EventTrigger&gt;
                      &lt;/Button.Triggers&gt;
                  &lt;/Button&gt;  
                  &lt;ab2d:ViewboxEx Name="Viewbox1"&gt;
                    &lt;TextBlock&gt;12345&lt;/TextBlock&gt;
                  &lt;/ab2d:ViewboxEx&gt;
                &lt;/Grid&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="P:Ab2d.Controls.ViewboxEx.CanHorizontallyScroll">
            <summary>
            CanHorizontallyScroll
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxEx.CanVerticallyScroll">
            <summary>
            CanVerticallyScroll
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ViewboxEx.LineDown">
            <summary>
            LineDown
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ViewboxEx.LineLeft">
            <summary>
            LineLeft
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ViewboxEx.LineRight">
            <summary>
            LineRight
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ViewboxEx.LineUp">
            <summary>
            LineUp
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ViewboxEx.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            MakeVisible
            </summary>
            <param name="visual">visual</param>
            <param name="rectangle">rectangle</param>
            <returns>System.Windows.Rect</returns>
        </member>
        <member name="M:Ab2d.Controls.ViewboxEx.MouseWheelDown">
            <summary>
            MouseWheelDown
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ViewboxEx.MouseWheelLeft">
            <summary>
            MouseWheelLeft
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ViewboxEx.MouseWheelRight">
            <summary>
            MouseWheelRight
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ViewboxEx.MouseWheelUp">
            <summary>
            MouseWheelUp
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ViewboxEx.PageDown">
            <summary>
            PageDown
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ViewboxEx.PageLeft">
            <summary>
            PageLeft
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ViewboxEx.PageRight">
            <summary>
            PageRight
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ViewboxEx.PageUp">
            <summary>
            PageUp
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxEx.ScrollOwner">
            <summary>
            ScrollOwner
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ViewboxEx.SetHorizontalOffset(System.Double)">
            <summary>
            SetHorizontalOffset
            </summary>
            <param name="offset">offset</param>
        </member>
        <member name="M:Ab2d.Controls.ViewboxEx.SetVerticalOffset(System.Double)">
            <summary>
            SetVerticalOffset
            </summary>
            <param name="offset">offset</param>
        </member>
        <member name="P:Ab2d.Controls.ViewboxEx.ExtentHeight">
            <summary>
            ExtentHeight
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxEx.ExtentWidth">
            <summary>
            ExtentWidth
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxEx.ViewportHeight">
            <summary>
            ViewportHeight
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxEx.ViewportWidth">
            <summary>
            ViewportWidth
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxEx.HorizontalOffset">
            <summary>
            HorizontalOffset
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxEx.VerticalOffset">
            <summary>
            VerticalOffset
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ViewboxEx.childBounds">
            <summary>
            bounds of the child
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ViewboxEx.DefaultViewbox">
            <summary>
            Default Viewbox value
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxEx.StretchDirection">
            <summary>
            Gets or sets the System.Windows.Controls.StretchDirection, which determines
            how scaling is applied to the contents of a ViewboxEx.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ViewboxEx.StretchDirectionProperty">
            <summary>
            StretchDirectionProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxEx.Stretch">
            <summary>
            Gets or sets the ViewboxEx System.Windows.Media.Stretch
            mode, which determines how content fits into the available space.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ViewboxEx.StretchProperty">
            <summary>
            StretchProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxEx.Viewbox">
            <summary>
            Gets or sets the box as Rect that determines which part of the the contents of a ViewboxEx is shown.
            Default value is "0 0 1 1" that shows the whole content.
            </summary>
            <remarks>
            <para>
            Examples:
            </para>
            <para>
            The Viewbox value "0 0 1 1" means that the whole content of the ViewboxEx will be shown - same as WPF's Viewbox.
            </para>
            <para>
            The value "0.5 0 0.5 1" means that only the right half of the content will be shown - x starting at 50%, y starting at 0%, width 50% and height 100%.
            </para>
            <para>
            The value "0.5 0.5 0.5 0.5" means that only the lower right quarter of the content will be shown.
            </para>
            <para>
            The value "-1 0 3 1" means that the ViewboxEx will show the area that is 3 times wider than its content - so the content will be shown in the middle of the ViewboxEx and there will be an empty area to the left and right of the content.
            </para>
            </remarks>
        </member>
        <member name="F:Ab2d.Controls.ViewboxEx.ViewboxProperty">
            <summary>
            ViewboxProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxEx.ViewboxUnits">
            <summary>
            Specifies the coordinate system used by Viewbox property Default value is BrushMappingMode.RelativeToBoundingBox.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ViewboxEx.ViewboxUnitsProperty">
            <summary>
            ViewboxUnitsProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxEx.RotationAngle">
            <summary>
            Gets or sets the rotation angle in degress, that determines the angle with witch the content of the ZoomPanel is rotated around the center of the ZoomPanel.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ViewboxEx.RotationAngleProperty">
            <summary>
            RotationAngleProperty
            </summary>
        </member>
        <member name="T:Ab2d.Controls.ViewboxEx.ActualViewboxChangedEventHandler">
            <summary>
            ActualViewboxChangedEventHandler is used with ActualViewboxChanged event.
            </summary>
            <param name="sender">sender</param>
            <param name="e">ActualViewboxChangedEventArgs</param>
        </member>
        <member name="E:Ab2d.Controls.ViewboxEx.ActualViewboxChanged">
            <summary>
            ActualViewboxChanged occurs after the ActualViewbox value is changed.
            </summary>
            <remarks>
            <para>
            <see cref="P:Ab2d.Controls.ViewboxEx.ActualViewbox"/> property describes the acually visible area of the content.
            </para>
            <para>
            ActualViewbox value can be different from <see cref="P:Ab2d.Controls.ViewboxEx.Viewbox"/> because of different aspect ratios of the ViewboxEx, content and Viewbox.
            </para>
            <list type="bullet">
            <listheader><description>The ActualViewboxChanged event is called when:</description></listheader>
            <item><description>Viewbox property is changed.</description></item>
            <item><description>Content of ViewboxEx is changed.</description></item>
            <item><description>Size of ViewboxEx is changed.</description></item>
            <item><description>Scroll in ScrollViewer that hosts ViewboxEx is changed.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Ab2d.Controls.ViewboxEx.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ViewboxEx.MeasureOverride(System.Windows.Size)">
            <summary>
            MeasureOverride
            </summary>
            <param name="measureSize">measureSize</param>
            <returns>Size</returns>
        </member>
        <member name="M:Ab2d.Controls.ViewboxEx.ArrangeOverride(System.Windows.Size)">
            <summary>
            ArrangeOverride
            </summary>
            <param name="arrangeSize">arrangeSize</param>
            <returns>Size</returns>
        </member>
        <member name="M:Ab2d.Controls.ViewboxEx.GetVisualChild(System.Int32)">
            <summary>
            GetVisualChild
            </summary>
            <param name="index">index</param>
            <returns>Visual</returns>
        </member>
        <member name="P:Ab2d.Controls.ViewboxEx.VisualChildrenCount">
            <summary>
            VisualChildrenCount
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ViewboxEx.GetRelativeViewbox">
            <summary>
            Gets the Viewbox as Rect in relative units.
            </summary>
            <returns>Viewbox as Rect in relative units</returns>
        </member>
        <member name="P:Ab2d.Controls.ViewboxEx.Child">
            <summary>
            Gets or sets the single child of a ViewboxEx element.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxEx.ContentSize">
            <summary>
            Gets the Size of the contents of a ViewboxEx before the transformation are applied to it.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxEx.ActualContentSize">
            <summary>
            Gets the Size of the contents of a ViewboxEx after the transformation were applied to it.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxEx.ActualContentBounds">
            <summary>
            Gets the Bounds of the contents of a ViewboxEx after the transformation were applied to it.
            Note that the value is changed after the ViewboxEx is rendered and not immediately after the properties change.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxEx.ActualViewbox">
            <summary>
            Gets the Rect that describes the area of the content that is actally visible on the screen.
            </summary>
            <remarks>
            <para>
            ActualViewbox value can be different from <see cref="P:Ab2d.Controls.ViewboxEx.Viewbox"/> because of different aspect ratios of the ViewboxEx, content and Viewbox.
            </para>
            <para>
            For example if we are showing a 100 x 100 Rectangle inside 200 x 100 ViewboxEx and Viewbox property is (0,0,1,1) than because ViewboxEx is wider as content Rectangle, 
            the Rectangle will be centered inside ViewboxEx with some empty space on the left and right. In this case the ActualViewbox would be (-0.5, 0, 2, 1).
            </para>
            <para>
            This would mean that the actually visible area is 2 times as wide as the Rectangle (ActualViewbox.Width = 2).
            The actually visible area is starting half the size of Rectangle to the left (ActualViewbox.X = 0.5).
            There is no empty space below or above the shown Rectangle (ActualViewbox.Y = 0 and ActualViewbox.Height = 1).
            </para>
            </remarks>
        </member>
        <member name="T:Ab2d.Controls.ViewboxExMiniMap">
            <summary>
            ViewboxExMiniMap can show mini map from the ViewboxEx control.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ViewboxExMiniMap.ViewboxEx">
            <summary>
            Gets or sets a ViewboxEx control that is used to get the content of ViewboxExMiniMap and position its rectangle.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ViewboxExMiniMap.ViewboxExProperty">
            <summary>
            ViewboxExProperty
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ViewboxExMiniMap.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ViewboxExMiniMap.GetViewboxForClipRectangle">
            <summary>
            Returns ActualViewbox from ViewboxEx instead of Viewbox
            </summary>
            <returns>ActualViewbox from ViewboxEx</returns>
        </member>
        <member name="T:Ab2d.Controls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Ab2d.Controls.RectAnimation">
            <summary>
            Animates the value of a System.Windows.Rect property between two target
            values using linear interpolation over a specified Duration.
            </summary>
            <example>
            The following example defines a Button that starts a RectAnimation of a VieboxEx's Viewbox.
            <code lang="xml">
            &lt;Window x:Class="Ab2d.ZoomControlSample.ZoomPanelSample"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:ab2d="clr-namespace:Ab2d.Controls;assembly=Ab2d.Controls.ZoomPanel"&gt;
              &lt;Grid&gt;
                 &lt;Button Name="StartStoryboardButton" VerticalAlignment="Top" HorizontalAlignment="Left"&gt;Start Animation
                      &lt;Button.Triggers&gt;
                          &lt;EventTrigger RoutedEvent="Button.Click"&gt;
                              &lt;EventTrigger.Actions&gt;
                                  &lt;BeginStoryboard&gt;
                                      &lt;Storyboard Name="XamlRectStoryboard"&gt;
                                          &lt;ab2d:RectAnimation From="0 0 1 1" To="0.2 0.2 0.6 0.6" Duration="0:0:4"
                                                  Storyboard.TargetName="Viewbox1" Storyboard.TargetProperty="Viewbox"/&gt;
                                          &lt;ab2d:RectAnimation To="0.5 0.4 0.2 0.2" BeginTime="0:0:4" Duration="0:0:4"
                                                  Storyboard.TargetName="Viewbox1" Storyboard.TargetProperty="Viewbox"/&gt;
                                          &lt;ab2d:RectAnimation To="0 0 1 1" BeginTime="0:0:8" Duration="0:0:2"
                                                  Storyboard.TargetName="Viewbox1" Storyboard.TargetProperty="Viewbox"/&gt;
                                      &lt;/Storyboard&gt;
                                  &lt;/BeginStoryboard&gt;
                              &lt;/EventTrigger.Actions&gt;
                          &lt;/EventTrigger&gt;
                      &lt;/Button.Triggers&gt;
                  &lt;/Button&gt;  
                  &lt;ab2d:ViewboxEx Name="Viewbox1"&gt;
                    &lt;TextBlock&gt;12345&lt;/TextBlock&gt;
                  &lt;/ab2d:ViewboxEx&gt;
                &lt;/Grid&gt;
            &lt;/Window&gt;
            </code>
            </example>
        </member>
        <member name="F:Ab2d.Controls.RectAnimation.FromProperty">
            <summary>
            FromProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.RectAnimation.ToProperty">
            <summary>
            ToProperty
            </summary>
        </member>
        <member name="M:Ab2d.Controls.RectAnimation.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Ab2d.Controls.RectAnimation.#ctor">
            <summary>
            Initializes a new instance of the RectAnimation class.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.RectAnimation.#ctor(System.Windows.Rect,System.Windows.Duration)">
            <summary>
            Initializes a new instance of the RectAnimation class.
            </summary>
            <param name="toValue">toValue</param>
            <param name="duration">duration</param>
        </member>
        <member name="M:Ab2d.Controls.RectAnimation.#ctor(System.Windows.Rect,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
            <summary>
            Initializes a new instance of the RectAnimation class.
            </summary>
            <param name="toValue">toValue</param>
            <param name="duration">duration</param>
            <param name="fillBehavior">fillBehavior</param>
        </member>
        <member name="M:Ab2d.Controls.RectAnimation.#ctor(System.Windows.Rect,System.Windows.Rect,System.Windows.Duration)">
            <summary>
            Initializes a new instance of the RectAnimation class.
            </summary>
            <param name="fromValue">fromValue</param>
            <param name="toValue">toValue</param>
            <param name="duration">duration</param>
        </member>
        <member name="M:Ab2d.Controls.RectAnimation.#ctor(System.Windows.Rect,System.Windows.Rect,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
            <summary>
            Initializes a new instance of the RectAnimation class.
            </summary>
            <param name="fromValue">fromValue</param>
            <param name="toValue">toValue</param>
            <param name="duration">duration</param>
            <param name="fillBehavior">fillBehavior</param>
        </member>
        <member name="M:Ab2d.Controls.RectAnimation.Clone">
            <summary>
                Creates a modifiable clone of this RectAnimation,
                making deep copies of this object's values. When copying dependency properties,
                this method copies resource references and data bindings (but they might
                no longer resolve) but not animations or their current values.
            </summary>
            <returns>A modifiable clone of the current object.</returns>
        </member>
        <member name="M:Ab2d.Controls.RectAnimation.CreateInstanceCore">
            <summary>
            Creates a new instance of the RectAnimation.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="P:Ab2d.Controls.RectAnimation.TargetPropertyType">
            <summary>
            TargetPropertyType
            </summary>
        </member>
        <member name="M:Ab2d.Controls.RectAnimation.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
            <summary>
            Calculates a value that represents the current value of the property being
            animated, as determined by the RectAnimation.
            </summary>
            <param name="defaultOriginValue">defaultOriginValue</param>
            <param name="defaultDestinationValue">defaultDestinationValue</param>
            <param name="animationClock">animationClock</param>
            <returns>>The calculated value of the property, as determined by the current animation.</returns>
        </member>
        <member name="M:Ab2d.Controls.RectAnimation.GetCurrentValueCore(System.Windows.Rect,System.Windows.Rect,System.Windows.Media.Animation.AnimationClock)">
            <summary>
            Calculates a value that represents the current value of the property being
            animated, as determined by the RectAnimation.
            </summary>
            <param name="defaultOriginValue">defaultOriginValue</param>
            <param name="defaultDestinationValue">defaultDestinationValue</param>
            <param name="animationClock">animationClock</param>
            <returns>The calculated value of the property, as determined by the current animation.</returns>
        </member>
        <member name="P:Ab2d.Controls.RectAnimation.From">
            <summary>
            Gets or sets the animation's starting value. This is a dependency property.
            </summary>
        </member>
        <member name="P:Ab2d.Controls.RectAnimation.To">
            <summary>
            Gets or sets the animation's ending value. This is a dependency property.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.RectHelpers.CreateRect(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns rect from startPoint and endPoint
            </summary>
            <param name="startPoint">startPoint</param>
            <param name="endPoint">endPoint</param>
            <returns>Rect</returns>
        </member>
        <member name="T:Ab2d.Controls.ZoomController">
            <summary>
            ZoomController is the default ZoomPanel controller that can be placed on the user interface
            and can be used to control the current <see cref="P:Ab2d.Controls.ZoomPanel.ZoomMode"/> of the <see cref="T:Ab2d.Controls.ZoomPanel"/>.
            </summary>
            <remarks>
            <para>
            <img src="ZoomController.png"/>
            </para>
            <para>
            The ZoomController contains the following buttons: Move, Rectangle, ZoomIn, ZoomOut and Reset.<br/>
            </para>
            <para>
            The first four buttons control the current zoom mode. If none is selected, than the current zoom mode is None - no mouse event is handled by the ZoomPanel.<br/>
            </para>
            <para>
            The action of the reset button depends on the <see cref="P:Ab2d.Controls.ZoomController.IsResetToLimits"/> property. If it is false (by default) the buttons resets the ZoomPanel to show all the content - sets the Viewbox to "0 0 1 1". If its value is true, than the buttons calls <see cref="M:Ab2d.Controls.ZoomPanel.ResetToLimits"/> method that shows the whole content as it is defined by the <see cref="P:Ab2d.Controls.ZoomPanel.ViewboxLimits"/> property.
            </para>
            <para>
            ZoomController can automatically discover the ZoomPanel in the current Window or Page.
            But if there are more ZoomPanels defined or you would like to explicitly set the ZoomPanel, <see cref="P:Ab2d.Controls.ZoomController.TargetZoomPanelName"/> or <see cref="P:Ab2d.Controls.ZoomController.TargetZoomPanel"/> can be used to connect ZoomController with the specific ZoomPanel.
            To disable the automatic discovery of ZoomPanel the <see cref="P:Ab2d.Controls.ZoomController.IsAutoZoomPanelFindingEnabled"/> property can be set to false.
            </para>
            </remarks>
            <example>
            The following example defines a default ZoomController and a ZoomPanel that enables zooming a TextBlock (the ZoomPanel is automatically discovered by ZoomController):
            <code lang="xml">
            &lt;Window x:Class="Ab2d.ZoomControlSample.ZoomPanelSample"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:ab2d="clr-namespace:Ab2d.Controls;assembly=Ab2d.Controls.ZoomPanel"&gt;
              &lt;Grid&gt;
                  &lt;ab2d:ZoomPanel Name="myZoomPanel"&gt;
                    &lt;TextBlock&gt;12345&lt;/TextBlock&gt;
                  &lt;/ab2d:ZoomPanel&gt;
                  &lt;ab2d:ZoomController VerticalAlignment="Top" 
                                       HorizontalAlignment="Right"/&gt;
                &lt;/Grid&gt;
            &lt;/Window>
            </code>
            The following example uses <see cref="P:Ab2d.Controls.ZoomController.TargetZoomPanelName"/> to define the ZoomPanel it is controlling:
            <code lang="xml">
            &lt;Window x:Class="Ab2d.ZoomControlSample.ZoomPanelSample"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:ab2d="clr-namespace:Ab2d.Controls;assembly=Ab2d.Controls.ZoomPanel"&gt;
              &lt;Grid&gt;
                  &lt;ab2d:ZoomPanel Name="myZoomPanel"&gt;
                    &lt;TextBlock&gt;12345&lt;/TextBlock&gt;
                  &lt;/ab2d:ZoomPanel&gt;
                  &lt;ab2d:ZoomController TargetZoomPanelName="myZoomPanel"
                                       VerticalAlignment="Top" 
                                       HorizontalAlignment="Right"/&gt;
                &lt;/Grid&gt;
            &lt;/Window>
            </code>
            The following example uses <see cref="P:Ab2d.Controls.ZoomController.TargetZoomPanel"/> to define the ZoomPanel it is controlling:
            <code lang="xml">
            &lt;Window x:Class="Ab2d.ZoomControlSample.ZoomPanelSample"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:ab2d="clr-namespace:Ab2d.Controls;assembly=Ab2d.Controls.ZoomPanel"&gt;
              &lt;Grid&gt;
                  &lt;ab2d:ZoomPanel Name="myZoomPanel"&gt;
                    &lt;TextBlock&gt;12345&lt;/TextBlock&gt;
                  &lt;/ab2d:ZoomPanel&gt;
                  &lt;ab2d:ZoomController TargetZoomPanel="{Binding ElementName=myZoomPanel}"
                                       VerticalAlignment="Top" 
                                       HorizontalAlignment="Right"/&gt;
                &lt;/Grid&gt;
            &lt;/Window>
            </code>     
            </example>
        </member>
        <member name="F:Ab2d.Controls.ZoomController.moveButton">
            <summary>
            moveButton
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomController.rectangleButton">
            <summary>
            rectangleButton
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomController.zoomInButton">
            <summary>
            zoomInButton
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomController.zoomOutButton">
            <summary>
            zoomOutButton
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomController.resetButton">
            <summary>
            resetButton
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomController.buttonsPanel">
            <summary>
            Stack panel that contains all the buttons
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomController.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomController.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomController.OnApplyTemplate">
            <summary>
            OnApplyTemplate
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomController.FindZoomPanel">
            <summary>
            Tries to find the ZoomPanel in the logical tree. This method is called when the TragetZoomPanel or TragetZoomPanelName is not set.
            </summary>
            <returns>ZoomPanel if found else null</returns>
        </member>
        <member name="F:Ab2d.Controls.ZoomController.TargetZoomPanelProperty">
            <summary>
            TargetZoomPanelProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomController.TargetZoomPanel">
            <summary>
            ZoomPanel control that is controlled by this ZoomController.
            </summary>
            <remarks>
            It is also possible to set the ZoomPanel control by its name with <see cref="P:Ab2d.Controls.ZoomController.TargetZoomPanelName"/>.
            If target ZoomPanel is not set with <see cref="P:Ab2d.Controls.ZoomController.TargetZoomPanel"/> or <see cref="P:Ab2d.Controls.ZoomController.TargetZoomPanelName"/>, it is discovered automatically.
            </remarks>
        </member>
        <member name="F:Ab2d.Controls.ZoomController.TargetZoomPanelNameProperty">
            <summary>
            TargetZoomPanelNameProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomController.TargetZoomPanelName">
            <summary>
            Gets or sets the name of the ZoomPanel that is controls with this ZoomController.
            </summary>
            <remarks>
            It is also possible to set the ZoomPanel control with <see cref="P:Ab2d.Controls.ZoomController.TargetZoomPanel"/>.
            If target ZoomPanel is not set with <see cref="P:Ab2d.Controls.ZoomController.TargetZoomPanel"/> or <see cref="P:Ab2d.Controls.ZoomController.TargetZoomPanelName"/>, it is discovered automatically.
            </remarks>
        </member>
        <member name="F:Ab2d.Controls.ZoomController.IsAutoZoomPanelFindingEnabledProperty">
            <summary>
            IsAutoZoomPanelFindingEnabledProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomController.IsAutoZoomPanelFindingEnabled">
            <summary>
            Gets or sets a Boolean which specifies that if <see cref="P:Ab2d.Controls.ZoomController.TargetZoomPanel"/> or <see cref="P:Ab2d.Controls.ZoomController.TargetZoomPanelName"/> properties are not manually set the first ZoomPanel is automatically found from the current UserControl, Page or Window. Default value is true.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomController.IsResetToLimitsProperty">
            <summary>
            IsResetToLimitsProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomController.IsResetToLimits">
            <summary>
            If true the Reset button on ZoomController will call <see cref="M:Ab2d.Controls.ZoomPanel.ResetToLimits"/> method instead of <see cref="M:Ab2d.Controls.ZoomPanel.Reset"/>.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomController.RefreshButtonsCheckedState(Ab2d.Controls.ZoomPanel.ZoomModeType)">
            <summary>
            Sets IsChecked state of the ZoomController buttons based on the zoomMode 
            </summary>
            <param name="zoomMode">zoomMode</param>
        </member>
        <member name="T:Ab2d.Controls.ZoomModeChangedRoutedEventArgs">
            <summary>
            Routed event args used to notify that the current zoom mode on ZoomPanel has changed
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomModeChangedRoutedEventArgs.OldZoomMode">
            <summary>
            Old ZoomMode
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomModeChangedRoutedEventArgs.NewZoomMode">
            <summary>
            New ZoomMode
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomModeChangedRoutedEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomModeChangedRoutedEventArgs.#ctor(Ab2d.Controls.ZoomPanel.ZoomModeType,Ab2d.Controls.ZoomPanel.ZoomModeType)">
            <summary>
            Constructor
            </summary>
            <param name="oldZoomMode">oldZoomMode</param>
            <param name="newZoomMode">newZoomMode</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomModeChangedRoutedEventArgs.#ctor(System.Object,Ab2d.Controls.ZoomPanel.ZoomModeType,Ab2d.Controls.ZoomPanel.ZoomModeType)">
            <summary>
            Constructor
            </summary>
            <param name="source">source</param>
            <param name="oldZoomMode">oldZoomMode</param>
            <param name="newZoomMode">newZoomMode</param>
        </member>
        <member name="T:Ab2d.Controls.ZoomPanelNavigator">
            <summary>
            ZoomPanelNavigator control can be used to control the ZoomPanel with buttons to move around and with slider to control the ZoomFactor.
            </summary>
            <remarks>
            <para>
            <img src="ZoomPanelNavigator.png"/>
            </para>     
            <para>
            <b>ZoomPanelNavigator</b> control can be used to control the ZoomPanel with buttons to move around and with slider to control the ZoomFactor.
            </para>
            <para>
            The ZoomPanelNavigator is using the <see cref="T:Ab2d.Controls.NavigationCircle"/> and <see cref="T:Ab2d.Controls.NavigationSlider"/> controls.
            The used controls can be accessed by <see cref="P:Ab2d.Controls.ZoomPanelNavigator.UsedNavigationCircle"/> and <see cref="P:Ab2d.Controls.ZoomPanelNavigator.UsedNavigationSlider"/> properties.
            </para>
            <para>
            ZoomPanelNavigator must be connected to a ZoomPanel to control it. 
            The ZoomPanel can be automatically discovered in the current Window or Page.
            But if there are more ZoomPanels defined or you would like to explicitly set the ZoomPanel, <see cref="P:Ab2d.Controls.ZoomPanelNavigator.TargetZoomPanelName"/> or <see cref="P:Ab2d.Controls.ZoomPanelNavigator.TargetZoomPanel"/> can be used to connect ZoomPanelNavigator with the specific ZoomPanel.
            To disable the automatic discovery of ZoomPanel the <see cref="P:Ab2d.Controls.ZoomPanelNavigator.IsAutoZoomPanelFindingEnabled"/> property can be set to false.
            </para>
            <para>
            The level of zoom that is applied to ZoomPanel is controlled by the <see cref="P:Ab2d.Controls.ZoomPanelNavigator.ZoomFactor"/> property.
            The minimum and maximum values of the ZoomFactor are set by <see cref="P:Ab2d.Controls.ZoomPanelNavigator.MinZoomFactor"/> and <see cref="P:Ab2d.Controls.ZoomPanelNavigator.MaxZoomFactor"/>.
            </para>
            <para>
            With <see cref="P:Ab2d.Controls.ZoomPanelNavigator.NavigationCircleVisibility"/> and <see cref="P:Ab2d.Controls.ZoomPanelNavigator.NavigationSliderVisibility"/> it is possible to control the visibility of used NavigationCircle and NavigationSlider.
            With <see cref="P:Ab2d.Controls.ZoomPanelNavigator.Orientation"/> it is possible to set the orientation of the controls.
            </para>
            <para>
            <b>Color customization:</b>
            </para>
            <para>
            By default the control is created from gradients of gray. When the mouse is over button the button is colored with gradients of orange.
            </para>
            <para>
            It is possible to customize the colors of the control with <see cref="M:Ab2d.Common.ZoomPanel.CommonNavigationResources.SetSelectedColor(System.Windows.Media.Color,System.Windows.Media.Color)">SetSelectedColor</see> or <see cref="M:Ab2d.Common.ZoomPanel.CommonNavigationResources.SetMainColors(System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color)">SetMainColors</see> methods.
            The first method define the colors that are used to select the buttons when the mouse is over the button. The second method also sets all other colors and can be used to completely change the colors used for the control.
            </para>
            <para>
            It is also possible to provide your own ResourceDictionary with custom colors and brushes. See samples that come with the control for more.
            </para>
            </remarks>
        </member>
        <member name="T:Ab2d.Controls.ZoomPanelNavigator.ZoomFactorCalculatorDelegate">
            <summary>
            Delegate that is used to calculate ZoomFactor from slider value and vice-versa.
            </summary>
            <param name="value">value</param>
            <returns>calculated value</returns>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanelNavigator.CalculateZoomFactorFromSliderValue">
            <summary>
            Callback method that can be used to provide custom calculation of ZoomFactor from slider value.
            </summary>
            <remarks>
            <para>
            <b>CalculateZoomFactorFromSliderValue</b> is a callback method that can be used to provide custom calculation of ZoomFactor from slider value.
            </para>
            <para>
            The range of the slider values is from 0 to 100.
            </para>
            </remarks>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanelNavigator.CalculateSliderValueFromZoomFactor">
            <summary>
            Callback method that can be used to provide custom calculation of slider value from ZoomFactor.
            </summary>
            <remarks>
            <para>
            <b>CalculateSliderValueFromZoomFactor</b> is a callback method that can be used to provide custom calculation of slider value from ZoomFactor.
            </para>
            <para>
            The range of the slider values is from 0 to 100.
            </para>
            </remarks>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelNavigator.UsedNavigationCircle">
            <summary>
            Used NavigationCircle control.
            </summary>
            <remarks>
            The <see cref="T:Ab2d.Controls.NavigationCircle"/> is used to display navigation buttons.
            </remarks>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelNavigator.UsedNavigationSlider">
            <summary>
            Used NavigationSlider control.
            </summary>
            <remarks>
            The <see cref="T:Ab2d.Controls.NavigationSlider"/> is used to display slider.
            </remarks>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelNavigator.TargetZoomPanel">
            <summary>
            Gets or sets the ZoomPanel control that is controlled by this ZoomPanelNavigator.
            </summary>
            <remarks>
            It is also possible to set the ZoomPanel control by its name with <see cref="P:Ab2d.Controls.ZoomPanelNavigator.TargetZoomPanelName"/>.
            If target ZoomPanel is not set with <see cref="P:Ab2d.Controls.ZoomPanelNavigator.TargetZoomPanel"/> or <see cref="P:Ab2d.Controls.ZoomPanelNavigator.TargetZoomPanelName"/>, it is discovered automatically.
            </remarks>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanelNavigator.TargetZoomPanelProperty">
            <summary>
            ViewboxExProperty
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanelNavigator.TargetZoomPanelNameProperty">
            <summary>
            TargetZoomPanelNameProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelNavigator.TargetZoomPanelName">
            <summary>
            Gets or sets the name of the ZoomPanel that is controls with this ZoomPanelNavigator.
            </summary>
            <remarks>
            It is also possible to set the ZoomPanel control with <see cref="P:Ab2d.Controls.ZoomPanelNavigator.TargetZoomPanel"/>.
            If target ZoomPanel is not set with <see cref="P:Ab2d.Controls.ZoomPanelNavigator.TargetZoomPanel"/> or <see cref="P:Ab2d.Controls.ZoomPanelNavigator.TargetZoomPanelName"/>, it is discovered automatically.
            </remarks>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanelNavigator.IsAutoZoomPanelFindingEnabledProperty">
            <summary>
            IsAutoZoomPanelFindingEnabledProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelNavigator.IsAutoZoomPanelFindingEnabled">
            <summary>
            Gets or sets a Boolean which specifies that if <see cref="P:Ab2d.Controls.ZoomPanelNavigator.TargetZoomPanel"/> or <see cref="P:Ab2d.Controls.ZoomPanelNavigator.TargetZoomPanelName"/> properties are not manually set the first ZoomPanel is automatically found from the current UserControl, Page or Window. Default value is true.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanelNavigator.OrientationProperty">
            <summary>
            OrientationProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelNavigator.Orientation">
            <summary>
            Gets or sets the orientation of a ZoomPanelNavigator. Default value is Vertical.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanelNavigator.ZoomFactorProperty">
            <summary>
            ZoomFactorProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelNavigator.ZoomFactor">
            <summary>
            Gets or sets the ZoomFactor that is applied to ZoomPanel.
            </summary>
            <remarks>
            <para>
            <b>ZoomFactor</b> gets or sets the ZoomFactor that is applied to ZoomPanel.
            </para>
            <para>
            When ZoomFactor is 1.0 that means that no zoom is applied to ZoomPanel.<br/>
            When ZoomFactor is greater than 1.0 the zoom in is applied (content is enlarged).<br/>
            When ZoomFactor is smaller than 1.0 the zoom out is applied (content is smaller).<br/>
            </para>
            <para>
            The ZoomFactor is controlled by the <see cref="P:Ab2d.Controls.ZoomPanelNavigator.UsedNavigationSlider"/>.
            The minimum and maximum values are defined by <see cref="P:Ab2d.Controls.ZoomPanelNavigator.MinZoomFactor"/> and <see cref="P:Ab2d.Controls.ZoomPanelNavigator.MaxZoomFactor"/> properties.
            </para>
            </remarks>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanelNavigator.MinZoomFactorProperty">
            <summary>
            MinZoomFactorProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelNavigator.MinZoomFactor">
            <summary>
            Gets or sets a double that specifies the minimum ZoomFactor value.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanelNavigator.MaxZoomFactorProperty">
            <summary>
            MaxZoomFactorProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelNavigator.MaxZoomFactor">
            <summary>
            Gets or sets a double that specifies the maximum ZoomFactor value.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanelNavigator.NavigationCircleVisibilityProperty">
            <summary>
            NavigationCircleVisibilityProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelNavigator.NavigationCircleVisibility">
            <summary>
            Gets or sets a Visibility of the used NavigationCircle.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanelNavigator.NavigationSliderVisibilityProperty">
            <summary>
            NavigationSliderVisibilityProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelNavigator.NavigationSliderVisibility">
            <summary>
            Gets or sets a Visibility of the used NavigationSlider.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanelNavigator.IsSnapToTickEnabledProperty">
            <summary>
            IsSnapToTickEnabledProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelNavigator.IsSnapToTickEnabled">
            <summary>
            Gets or sets a boolean that specifies if snapping to specific ZoomFactor values is enabled.
            </summary>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanelNavigator.IsZoomPanelLimitedToMinMaxZoomFactorsProperty">
            <summary>
            IsZoomPanelLimitedToMinMaxZoomFactorsProperty
            </summary>
        </member>
        <member name="P:Ab2d.Controls.ZoomPanelNavigator.IsZoomPanelLimitedToMinMaxZoomFactors">
            <summary>
            Gets or sets a boolean that specifies if the ZoomPanel is limited to the MinZoomFactor and MaxZoomFactor values.
            </summary>
            <remarks>
            <para>
            It is possible to set the limits of the area that can be visible by the ZoomPanel (limit the zoom in and zoom out).
            This is set by <see cref="P:Ab2d.Controls.ZoomPanel.ViewboxMinSize"/> and <see cref="P:Ab2d.Controls.ZoomPanel.ViewboxLimits"/> properties on ZoomPanel.
            </para>
            <para>
            When <b>IsZoomPanelLimitedToMinMaxZoomFactors</b> is true (by default) the ZoomPanel is limited to the values of the <see cref="P:Ab2d.Controls.ZoomPanelNavigator.MinZoomFactor"/> and  <see cref="P:Ab2d.Controls.ZoomPanelNavigator.MaxZoomFactor"/>.
            That means that user cannot zoom in and out on ZoomPanel for more that it is set by the ZoomPanelNavigator.
            </para>
            <para>
            When <b>IsZoomPanelLimitedToMinMaxZoomFactors</b> is false the user can manually zoom in and out for more that it is specified by the <see cref="P:Ab2d.Controls.ZoomPanelNavigator.MinZoomFactor"/> and  <see cref="P:Ab2d.Controls.ZoomPanelNavigator.MaxZoomFactor"/> properties.
            </para>
            </remarks>
        </member>
        <member name="T:Ab2d.Controls.ZoomPanelNavigator.NavigatorSliderValueChangedRoutedEventHandler">
            <summary>
            NavigatorSliderValueChangedRoutedEventHandler
            </summary>
            <param name="sender">sender</param>
            <param name="e">NavigatorSliderValueChangedRoutedEventArgs</param>
        </member>
        <member name="F:Ab2d.Controls.ZoomPanelNavigator.NavigatorSliderValueChangedEvent">
            <summary>
            NavigatorSliderValueChanged RoutedEvent
            </summary>
        </member>
        <member name="E:Ab2d.Controls.ZoomPanelNavigator.NavigatorSliderValueChanged">
            <summary>
            NavigatorSliderValueChanged occurs when navigation slider value is changed by the user.
            The event handler can also change the proposed ZoomFactor value.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanelNavigator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanelNavigator.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanelNavigator.OnApplyTemplate">
            <summary>
            OnApplyTemplate
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanelNavigator.FindZoomPanel">
            <summary>
            Tries to find the ZoomPanel in the logical tree. This method is called when the TragetZoomPanel or TragetZoomPanelName is not set.
            </summary>
            <returns>ZoomPanel if found else null</returns>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanelNavigator.UpdateSliderPosition">
            <summary>
            Updates the slider position based on the current ZoomFactor.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanelNavigator.UpdateSliderPosition(System.Double)">
            <summary>
            Updates the slider position based on the zoomFactor value.
            </summary>
            <param name="zoomFactor">zoomFactor</param>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanelNavigator.UpdateSliderTicks">
            <summary>
            Updates the TickFrequency on the slider based on the MinZoomFactor and MaxZoomFactor.
            The method can be overridden to provide custom settings.
            </summary>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanelNavigator.GetZoomFactorFromSliderValue(System.Double)">
            <summary>
            Returns a ZoomFactor value from the slider value.
            The method can be overridden to provide custom calculations.
            </summary>
            <remarks>
            <para>
            <b>GetZoomFactorFromSliderValue</b> returns a ZoomFactor value from the slider value.
            </para>
            <para>
            The range of the slider values is from 0 to 100.
            </para>
            </remarks>
            <param name="sliderValue">slider value</param>
            <returns>ZoomFactor value</returns>
        </member>
        <member name="M:Ab2d.Controls.ZoomPanelNavigator.GetSliderValueFromZoomFactor(System.Double)">
            <summary>
            Returns slider value from the ZoomFactor value.
            The method can be overridden to provide custom calculations.
            </summary>
            <remarks>
            <para>
            <b>GetSliderValueFromZoomFactor</b> returns slider value from the ZoomFactor value.
            </para>
            <para>
            The range of the slider values is from 0 to 100.
            </para>
            </remarks>       
            <param name="zoomFactor">ZoomFactor value</param>
            <returns>slider value</returns>
        </member>
        <member name="M:Ab2d.Common.ZoomPanel.ColorHelper.GetHSBFromColor(System.Windows.Media.Color,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets hue, saturation and brightness from a color. Hue is from 0 to 360. Saturation and brightness is from 0 to 1.
            </summary>
            <param name="originalColor">color</param>
            <param name="h">hue</param>
            <param name="s">saturation</param>
            <param name="b">brightness</param>
        </member>
        <member name="M:Ab2d.Common.ZoomPanel.ColorHelper.GetColorFromHSB(System.Double,System.Double,System.Double)">
            <summary>
            Gets a color from hue, saturation and brightness. Hue is from 0 to 360. Saturation and brightness is from 0 to 1.
            </summary>
            <param name="h">hue</param>
            <param name="s">saturation</param>
            <param name="b">brightness</param>
            <returns>color</returns>
        </member>
        <member name="M:Ab2d.Common.ZoomPanel.ColorHelper.InterpolateColor(System.Windows.Media.Color,System.Windows.Media.Color,System.Double)">
            <summary>
            Gets a color that is interpolated for color1 to color2 by the factor.
            </summary>
            <param name="color1">color1</param>
            <param name="color2">color2</param>
            <param name="factor">interpolation factor</param>
            <returns>interpolated color</returns>
        </member>
        <member name="T:Ab2d.Common.ZoomPanel.CommonNavigationResources">
            <summary>
            CommonNavigationResources class is a helper class to set custom colors for the ZoomPanelNavigator.
            </summary>
        </member>
        <member name="F:Ab2d.Common.ZoomPanel.CommonNavigationResources.COMMON_COLOR_KEYS_SelectedColor">
            <summary>
            COMMON_COLOR_KEYS_SelectedColor
            </summary>
        </member>
        <member name="F:Ab2d.Common.ZoomPanel.CommonNavigationResources.COMMON_COLOR_KEYS_LightSelectedColor">
            <summary>
            COMMON_COLOR_KEYS_LightSelectedColor
            </summary>
        </member>
        <member name="F:Ab2d.Common.ZoomPanel.CommonNavigationResources.COMMON_COLOR_KEYS_DarkSelectedColor">
            <summary>
            COMMON_COLOR_KEYS_DarkSelectedColor
            </summary>
        </member>
        <member name="F:Ab2d.Common.ZoomPanel.CommonNavigationResources.COMMON_COLOR_KEYS_SelectedContentColor">
            <summary>
            COMMON_COLOR_KEYS_SelectedContentColor
            </summary>
        </member>
        <member name="F:Ab2d.Common.ZoomPanel.CommonNavigationResources.COMMON_COLOR_KEYS_Color_000">
            <summary>
            COMMON_COLOR_KEYS_Color_000
            </summary>
        </member>
        <member name="F:Ab2d.Common.ZoomPanel.CommonNavigationResources.COMMON_COLOR_KEYS_Color_222">
            <summary>
            COMMON_COLOR_KEYS_Color_222
            </summary>
        </member>
        <member name="F:Ab2d.Common.ZoomPanel.CommonNavigationResources.COMMON_COLOR_KEYS_Color_333">
            <summary>
            COMMON_COLOR_KEYS_Color_333
            </summary>
        </member>
        <member name="F:Ab2d.Common.ZoomPanel.CommonNavigationResources.COMMON_COLOR_KEYS_Color_555">
            <summary>
            COMMON_COLOR_KEYS_Color_555
            </summary>
        </member>
        <member name="F:Ab2d.Common.ZoomPanel.CommonNavigationResources.COMMON_COLOR_KEYS_Color_888">
            <summary>
            COMMON_COLOR_KEYS_Color_888
            </summary>
        </member>
        <member name="F:Ab2d.Common.ZoomPanel.CommonNavigationResources.COMMON_COLOR_KEYS_Color_BBB">
            <summary>
            COMMON_COLOR_KEYS_Color_BBB
            </summary>
        </member>
        <member name="F:Ab2d.Common.ZoomPanel.CommonNavigationResources.COMMON_COLOR_KEYS_Color_FFF">
            <summary>
            COMMON_COLOR_KEYS_Color_FFF
            </summary>
        </member>
        <member name="P:Ab2d.Common.ZoomPanel.CommonNavigationResources.Instance">
            <summary>
            Static instance of the CommonNavigationResources.
            </summary>
        </member>
        <member name="M:Ab2d.Common.ZoomPanel.CommonNavigationResources.SetSelectedColor(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Sets the colors for ZoomPanelNavigator that are used when mouse is over the buttons.
            </summary>
            <param name="selectedFillColor">selected fill color</param>
            <param name="selectedContentColor">selected content color</param>
        </member>
        <member name="M:Ab2d.Common.ZoomPanel.CommonNavigationResources.SetSelectedColor(System.Windows.Media.Color,System.Windows.Media.Color,System.Double,System.Double)">
            <summary>
            Sets the colors for ZoomPanelNavigator that are used when mouse is over the buttons. It is possible to set the lighten and darken factors.
            </summary>
            <param name="selectedFillColor">selected fill color</param>
            <param name="selectedContentColor">selected content color</param>
            <param name="lightenFactor">lighten factor</param>
            <param name="darkenFactor">darken factor</param>
        </member>
        <member name="M:Ab2d.Common.ZoomPanel.CommonNavigationResources.SetMainColors(System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Sets all colors of the ZoomPanelNavigator.
            </summary>
            <param name="lightColor">light color</param>
            <param name="darkColor">dark color</param>
            <param name="selectedColor">selected content color</param>
            <param name="selectedContentColor">selected content color</param>
        </member>
        <member name="M:Ab2d.Common.ZoomPanel.CommonNavigationResources.SetResourceColor(System.String,System.Windows.Media.Color)">
            <summary>
            Sets the color value for the specified resource key.
            </summary>
            <param name="key">resource key</param>
            <param name="newColor">color value</param>
        </member>
        <member name="M:Ab2d.Common.ZoomPanel.CommonNavigationResources.GetResourceColor(System.String)">
            <summary>
            Gets the color value for the specified resource key.
            </summary>
            <param name="key">resource key</param>
            <returns>color value</returns>
        </member>
        <member name="T:Ab.Common.RenderingTimer">
            <summary>
            Timer that is using CompositionTarget.Rendering event and reports progress from 0 to Duration
            </summary>
        </member>
    </members>
</doc>
